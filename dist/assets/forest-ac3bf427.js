import{J as r,z as i}from"./index-90956256.js";async function o(t,e){return r({url:`https://recreation.forest.gov.tw/mis/api/news?startDate=${t}&endDate=${e}`,method:"get"})}async function c(t,e,n,s){return r({url:`https://frances.sinami.com/api/insertForestData/?Region=${t}&Typ=${s}&Keyword=&Height=${e}&IsOpen=&Traffic=&RT_Length=&RT_Time=&sort=&PageIndex=${n}&PageSize=36&topic=`,method:"get"})}async function u(){return r({url:"https://frances.sinami.com/api/getMountainData/"})}async function d(t){return r.post("https://frances.sinami.com/api/formUnitsMainSecondaryRoute/",t)}async function f(){return r({url:"https://frances.sinami.com/api/getMountainLocation/"})}async function m(){return r({url:"https://frances.sinami.com/api/getMonutainInfo/"})}async function g(t){return r.post("https://frances.sinami.com/api/sendMountainTripViewSet/",t)}async function p(){return r.get("https://frances.sinami.com/api/sendMountainTripViewSet/")}const h=i("forestData",{state:()=>({forestInfo:[],queryInfo:[],MountainLevel:[],MountainData:[],selectedGrades:[],tripList:[]}),getters:{filteredMountains(t){return t.selectedGrades.length?t.MountainLevel.data.filter(e=>t.selectedGrades.includes(e.Grade)):t.MountainLevel.data}},actions:{async getForestInfoMethod(t,e){try{const{data:n}=await o(t,e);return console.log(n),this.forestInfo=n,n}catch(n){return Promise.reject(n.message)}},async getQueryForest(t,e,n,s){try{const{data:a}=await c(t,e,n,s);return this.queryInfo=a,a}catch(a){return Promise.reject(a.message)}},async getQueryMountainData(){try{const{data:t}=await u();return this.MountainData=t,t}catch(t){return Promise.reject(t.message)}},async getQueryMountainRouteWeb(t){try{const{data:e}=await d(t);return e}catch(e){return Promise.reject(e.message)}},async getQueryMountainLocation(){try{const{data:t}=await f();return t}catch(t){return Promise.reject(t.message)}},async getMonutainInfoLevel(){try{const{data:t}=await m();return this.MountainLevel=t,t}catch(t){return Promise.reject(t.message)}},selectGrade(t){if(!this.selectedGrades.includes(t))this.selectedGrades.push(t);else{const e=this.selectedGrades.indexOf(t);e>-1&&this.selectedGrades.splice(e,1)}},async postMountainTripList(t){try{const{data:e}=await g(t);return e}catch(e){return Promise.reject(e.message)}},async getMountainTripList(){try{const{data:t}=await p();return this.tripList=t,t}catch(t){return Promise.reject(t.message)}}}});export{h as u};
