{
    "sourceFile": "src/utils/service.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 43,
            "patches": [
                {
                    "date": 1691468319064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1691468488870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import axios from 'axios'\r\n-import { usePlaneData } from ''\r\n+import { useUserStoreHook } from \"../stores/login\"\r\n \r\n const store = usePlaneData()\r\n \r\n axios.defaults.timeout = 5000\r\n@@ -8,17 +8,19 @@\n \r\n \r\n \r\n axios.interceptors.request.use(\r\n-    config => {\r\n-        if (store.state.token) {\r\n-            config.headers.Authorization = `token ${store.state.token}`\r\n-        }\r\n-        return config\r\n-    },\r\n-    err => {\r\n-        return Promise.reject(err)\r\n-    },\r\n+    (config) => config,\r\n+    (error) => Promise.reject(error)\r\n+    // config => {\r\n+    //     if (store.state.token) {\r\n+    //         config.headers.Authorization = `token ${store.state.token}`\r\n+    //     }\r\n+    //     return config\r\n+    // },\r\n+    // err => {\r\n+    //     return Promise.reject(err)\r\n+    // },\r\n )\r\n axios.interceptors.response.use(\r\n     response => {\r\n         return response\r\n"
                },
                {
                    "date": 1691468499188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,8 @@\n     error => {\r\n         if (error.response) {\r\n         switch (error.response.status) {\r\n             case 401:\r\n-            store.commit(store.registerUser)\r\n             router.currentRoute.path !== 'login' &&\r\n             router.replace({\r\n                 path: 'login',\r\n                 query: { redirect: router.currentRoute.path },\r\n"
                },
                {
                    "date": 1691468506317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,6 @@\n import axios from 'axios'\r\n-import { useUserStoreHook } from \"../stores/login\"\r\n \r\n-const store = usePlaneData()\r\n \r\n axios.defaults.timeout = 5000\r\n axios.defaults.baseURL = 'https://reqres.in/api/'\r\n \r\n"
                },
                {
                    "date": 1691468686035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,41 @@\n+import axios from 'axios'\r\n+\r\n+axios.defaults.timeout = 5000\r\n+axios.defaults.baseURL = 'https://reqres.in/api/'\r\n+\r\n+\r\n+\r\n+axios.interceptors.request.use(\r\n+    (config) => config,\r\n+    (error) => Promise.reject(error)\r\n+    // config => {\r\n+    //     if (store.state.token) {\r\n+    //         config.headers.Authorization = `token ${store.state.token}`\r\n+    //     }\r\n+    //     return config\r\n+    // },\r\n+    // err => {\r\n+    //     return Promise.reject(err)\r\n+    // },\r\n+)\r\n+axios.interceptors.response.use(\r\n+    response => {\r\n+        return response\r\n+    },\r\n+    error => {\r\n+        if (error.response) {\r\n+        switch (error.response.status) {\r\n+            case 401:\r\n+            router.currentRoute.path !== 'login' &&\r\n+            router.replace({\r\n+                path: 'login',\r\n+                query: { redirect: router.currentRoute.path },\r\n+            })\r\n+        }\r\n+    }\r\n+        return Promise.reject(error.response.data)\r\n+    },\r\n+)\r\n+\r\n+\r\n+export default axios\r\n"
                },
                {
                    "date": 1691469343586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,58 @@\n+import axios from 'axios'\r\n+\r\n+// axios.defaults.timeout = 5000\r\n+// axios.defaults.baseURL = 'https://reqres.in/api/'\r\n+// axios.interceptors.request.use(\r\n+//     (config) => config,\r\n+//     (error) => Promise.reject(error)\r\n+//     // config => {\r\n+//     //     if (store.state.token) {\r\n+//     //         config.headers.Authorization = `token ${store.state.token}`\r\n+//     //     }\r\n+//     //     return config\r\n+//     // },\r\n+//     // err => {\r\n+//     //     return Promise.reject(err)\r\n+//     // },\r\n+// )\r\n+// axios.interceptors.response.use(\r\n+//     response => {\r\n+//         return response\r\n+//     },\r\n+//     error => {\r\n+//         if (error.response) {\r\n+//         switch (error.response.status) {\r\n+//             case 401:\r\n+//             router.currentRoute.path !== 'login' &&\r\n+//             router.replace({\r\n+//                 path: 'login',\r\n+//                 query: { redirect: router.currentRoute.path },\r\n+//             })\r\n+//         }\r\n+//     }\r\n+//         return Promise.reject(error.response.data)\r\n+//     },\r\n+// )\r\n+\r\n+\r\n+// export default axios\r\n+function createRequest(service) {\r\n+    return function(config) {\r\n+        const token = getToken();\r\n+        const defaultConfig = {\r\n+            headers: {\r\n+            // Carry Token\r\n+                Authorization: token ? `Bearer ${token}` : undefined,\r\n+                \"Content-Type\": \"application/json\"\r\n+            },\r\n+            timeout: 5000,\r\n+            // baseURL: import.meta.env.VITE_BASE_API,\r\n+            baseURL: 'https://reqres.in/api/',\r\n+            data: {}\r\n+        };\r\n+        const mergeConfig = merge(defaultConfig, config);\r\n+        return service(mergeConfig);\r\n+    };\r\n+}\r\n+\r\n+export const request = createRequest(service)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691469449107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,87 +54,5 @@\n         return service(mergeConfig);\r\n     };\r\n }\r\n \r\n-export const request = createRequest(service)\n-import axios from 'axios'\r\n-\r\n-axios.defaults.timeout = 5000\r\n-axios.defaults.baseURL = 'https://reqres.in/api/'\r\n-\r\n-\r\n-\r\n-axios.interceptors.request.use(\r\n-    (config) => config,\r\n-    (error) => Promise.reject(error)\r\n-    // config => {\r\n-    //     if (store.state.token) {\r\n-    //         config.headers.Authorization = `token ${store.state.token}`\r\n-    //     }\r\n-    //     return config\r\n-    // },\r\n-    // err => {\r\n-    //     return Promise.reject(err)\r\n-    // },\r\n-)\r\n-axios.interceptors.response.use(\r\n-    response => {\r\n-        return response\r\n-    },\r\n-    error => {\r\n-        if (error.response) {\r\n-        switch (error.response.status) {\r\n-            case 401:\r\n-            router.currentRoute.path !== 'login' &&\r\n-            router.replace({\r\n-                path: 'login',\r\n-                query: { redirect: router.currentRoute.path },\r\n-            })\r\n-        }\r\n-    }\r\n-        return Promise.reject(error.response.data)\r\n-    },\r\n-)\r\n-\r\n-\r\n-export default axios\r\n-import axios from 'axios'\r\n-\r\n-\r\n-axios.defaults.timeout = 5000\r\n-axios.defaults.baseURL = 'https://reqres.in/api/'\r\n-\r\n-\r\n-\r\n-axios.interceptors.request.use(\r\n-    (config) => config,\r\n-    (error) => Promise.reject(error)\r\n-    // config => {\r\n-    //     if (store.state.token) {\r\n-    //         config.headers.Authorization = `token ${store.state.token}`\r\n-    //     }\r\n-    //     return config\r\n-    // },\r\n-    // err => {\r\n-    //     return Promise.reject(err)\r\n-    // },\r\n-)\r\n-axios.interceptors.response.use(\r\n-    response => {\r\n-        return response\r\n-    },\r\n-    error => {\r\n-        if (error.response) {\r\n-        switch (error.response.status) {\r\n-            case 401:\r\n-            router.currentRoute.path !== 'login' &&\r\n-            router.replace({\r\n-                path: 'login',\r\n-                query: { redirect: router.currentRoute.path },\r\n-            })\r\n-        }\r\n-    }\r\n-        return Promise.reject(error.response.data)\r\n-    },\r\n-)\r\n-\r\n-export default axios\n\\ No newline at end of file\n+export const request = createRequest(service)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691469490443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import axios from 'axios'\r\n+// import axios from 'axios'\r\n \r\n // axios.defaults.timeout = 5000\r\n // axios.defaults.baseURL = 'https://reqres.in/api/'\r\n // axios.interceptors.request.use(\r\n"
                },
                {
                    "date": 1691470116197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+// import axios from 'axios'\r\n+// axios.defaults.timeout = 5000\r\n+// axios.defaults.baseURL = 'https://reqres.in/api/'\r\n+// axios.interceptors.request.use(\r\n+//     (config) => config,\r\n+//     (error) => Promise.reject(error)\r\n+//     // config => {\r\n+//     //     if (store.state.token) {\r\n+//     //         config.headers.Authorization = `token ${store.state.token}`\r\n+//     //     }\r\n+//     //     return config\r\n+//     // },\r\n+//     // err => {\r\n+//     //     return Promise.reject(err)\r\n+//     // },\r\n+// )\r\n+// axios.interceptors.response.use(\r\n+//     response => {\r\n+//         return response\r\n+//     },\r\n+//     error => {\r\n+//         if (error.response) {\r\n+//         switch (error.response.status) {\r\n+//             case 401:\r\n+//             router.currentRoute.path !== 'login' &&\r\n+//             router.replace({\r\n+//                 path: 'login',\r\n+//                 query: { redirect: router.currentRoute.path },\r\n+//             })\r\n+//         }\r\n+//     }\r\n+//         return Promise.reject(error.response.data)\r\n+//     },\r\n+// )\r\n+\r\n+import axios from \"axios\";\r\n+// export default axios\r\n+function createRequest(service) {\r\n+    return function(config) {\r\n+        const token = getToken();\r\n+        const defaultConfig = {\r\n+            headers: {\r\n+            // Carry Token\r\n+                Authorization: token ? `Bearer ${token}` : undefined,\r\n+                \"Content-Type\": \"application/json\"\r\n+            },\r\n+            timeout: 5000,\r\n+            // baseURL: import.meta.env.VITE_BASE_API,\r\n+            baseURL: 'https://reqres.in/api/',\r\n+            data: {}\r\n+        };\r\n+        const mergeConfig = merge(defaultConfig, config);\r\n+        return service(mergeConfig);\r\n+    };\r\n+}\r\n+\r\n+export const request = createRequest(axios)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691471036609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+// import axios from 'axios'\r\n+// axios.defaults.timeout = 5000\r\n+// axios.defaults.baseURL = 'https://reqres.in/api/'\r\n+// axios.interceptors.request.use(\r\n+//     (config) => config,\r\n+//     (error) => Promise.reject(error)\r\n+//     // config => {\r\n+//     //     if (store.state.token) {\r\n+//     //         config.headers.Authorization = `token ${store.state.token}`\r\n+//     //     }\r\n+//     //     return config\r\n+//     // },\r\n+//     // err => {\r\n+//     //     return Promise.reject(err)\r\n+//     // },\r\n+// )\r\n+// axios.interceptors.response.use(\r\n+//     response => {\r\n+//         return response\r\n+//     },\r\n+//     error => {\r\n+//         if (error.response) {\r\n+//         switch (error.response.status) {\r\n+//             case 401:\r\n+//             router.currentRoute.path !== 'login' &&\r\n+//             router.replace({\r\n+//                 path: 'login',\r\n+//                 query: { redirect: router.currentRoute.path },\r\n+//             })\r\n+//         }\r\n+//     }\r\n+//         return Promise.reject(error.response.data)\r\n+//     },\r\n+// )\r\n+\r\n+import axios from \"axios\";\r\n+import getToken from '../utils/cookie'\r\n+// export default axios\r\n+function createRequest(service) {\r\n+    return function(config) {\r\n+        const token = getToken();\r\n+        const defaultConfig = {\r\n+            headers: {\r\n+            // Carry Token\r\n+                Authorization: token ? `Bearer ${token}` : undefined,\r\n+                \"Content-Type\": \"application/json\"\r\n+            },\r\n+            timeout: 5000,\r\n+            // baseURL: import.meta.env.VITE_BASE_API,\r\n+            baseURL: 'https://reqres.in/api/',\r\n+            data: {}\r\n+        };\r\n+        const mergeConfig = merge(defaultConfig, config);\r\n+        return service(mergeConfig);\r\n+    };\r\n+}\r\n+export const request = createRequest(axios)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691471061602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+// import axios from 'axios'\r\n+// axios.defaults.timeout = 5000\r\n+// axios.defaults.baseURL = 'https://reqres.in/api/'\r\n+// axios.interceptors.request.use(\r\n+//     (config) => config,\r\n+//     (error) => Promise.reject(error)\r\n+//     // config => {\r\n+//     //     if (store.state.token) {\r\n+//     //         config.headers.Authorization = `token ${store.state.token}`\r\n+//     //     }\r\n+//     //     return config\r\n+//     // },\r\n+//     // err => {\r\n+//     //     return Promise.reject(err)\r\n+//     // },\r\n+// )\r\n+// axios.interceptors.response.use(\r\n+//     response => {\r\n+//         return response\r\n+//     },\r\n+//     error => {\r\n+//         if (error.response) {\r\n+//         switch (error.response.status) {\r\n+//             case 401:\r\n+//             router.currentRoute.path !== 'login' &&\r\n+//             router.replace({\r\n+//                 path: 'login',\r\n+//                 query: { redirect: router.currentRoute.path },\r\n+//             })\r\n+//         }\r\n+//     }\r\n+//         return Promise.reject(error.response.data)\r\n+//     },\r\n+// )\r\n+\r\n+import axios from \"axios\";\r\n+import getToken from '../utils/cookie'\r\n+// export default axios\r\n+function createRequest(service) {\r\n+    return function(config) {\r\n+        const token = getToken();\r\n+        const defaultConfig = {\r\n+            headers: {\r\n+            // Carry Token\r\n+                Authorization: token ? `Bearer ${token}` : undefined,\r\n+                \"Content-Type\": \"application/json\"\r\n+            },\r\n+            timeout: 5000,\r\n+            // baseURL: import.meta.env.VITE_BASE_API,\r\n+            baseURL: 'https://reqres.in/api/',\r\n+            data: {}\r\n+        };\r\n+        const mergeConfig = merge(defaultConfig, config);\r\n+        return service(mergeConfig);\r\n+    };\r\n+}\r\n+export const request = createRequest(axios)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691471187770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n //     },\r\n // )\r\n \r\n import axios from \"axios\";\r\n-import getToken from '../utils/cookie'\r\n+import {getToken} from '../utils/cookie'\r\n // export default axios\r\n function createRequest(service) {\r\n     return function(config) {\r\n         const token = getToken();\r\n@@ -53,177 +53,5 @@\n         const mergeConfig = merge(defaultConfig, config);\r\n         return service(mergeConfig);\r\n     };\r\n }\r\n-export const request = createRequest(axios)\n-// import axios from 'axios'\r\n-// axios.defaults.timeout = 5000\r\n-// axios.defaults.baseURL = 'https://reqres.in/api/'\r\n-// axios.interceptors.request.use(\r\n-//     (config) => config,\r\n-//     (error) => Promise.reject(error)\r\n-//     // config => {\r\n-//     //     if (store.state.token) {\r\n-//     //         config.headers.Authorization = `token ${store.state.token}`\r\n-//     //     }\r\n-//     //     return config\r\n-//     // },\r\n-//     // err => {\r\n-//     //     return Promise.reject(err)\r\n-//     // },\r\n-// )\r\n-// axios.interceptors.response.use(\r\n-//     response => {\r\n-//         return response\r\n-//     },\r\n-//     error => {\r\n-//         if (error.response) {\r\n-//         switch (error.response.status) {\r\n-//             case 401:\r\n-//             router.currentRoute.path !== 'login' &&\r\n-//             router.replace({\r\n-//                 path: 'login',\r\n-//                 query: { redirect: router.currentRoute.path },\r\n-//             })\r\n-//         }\r\n-//     }\r\n-//         return Promise.reject(error.response.data)\r\n-//     },\r\n-// )\r\n-\r\n-import axios from \"axios\";\r\n-import getToken from '../utils/cookie'\r\n-// export default axios\r\n-function createRequest(service) {\r\n-    return function(config) {\r\n-        const token = getToken();\r\n-        const defaultConfig = {\r\n-            headers: {\r\n-            // Carry Token\r\n-                Authorization: token ? `Bearer ${token}` : undefined,\r\n-                \"Content-Type\": \"application/json\"\r\n-            },\r\n-            timeout: 5000,\r\n-            // baseURL: import.meta.env.VITE_BASE_API,\r\n-            baseURL: 'https://reqres.in/api/',\r\n-            data: {}\r\n-        };\r\n-        const mergeConfig = merge(defaultConfig, config);\r\n-        return service(mergeConfig);\r\n-    };\r\n-}\r\n-export const request = createRequest(axios)\n-// import axios from 'axios'\r\n-// axios.defaults.timeout = 5000\r\n-// axios.defaults.baseURL = 'https://reqres.in/api/'\r\n-// axios.interceptors.request.use(\r\n-//     (config) => config,\r\n-//     (error) => Promise.reject(error)\r\n-//     // config => {\r\n-//     //     if (store.state.token) {\r\n-//     //         config.headers.Authorization = `token ${store.state.token}`\r\n-//     //     }\r\n-//     //     return config\r\n-//     // },\r\n-//     // err => {\r\n-//     //     return Promise.reject(err)\r\n-//     // },\r\n-// )\r\n-// axios.interceptors.response.use(\r\n-//     response => {\r\n-//         return response\r\n-//     },\r\n-//     error => {\r\n-//         if (error.response) {\r\n-//         switch (error.response.status) {\r\n-//             case 401:\r\n-//             router.currentRoute.path !== 'login' &&\r\n-//             router.replace({\r\n-//                 path: 'login',\r\n-//                 query: { redirect: router.currentRoute.path },\r\n-//             })\r\n-//         }\r\n-//     }\r\n-//         return Promise.reject(error.response.data)\r\n-//     },\r\n-// )\r\n-\r\n-import axios from \"axios\";\r\n-// export default axios\r\n-function createRequest(service) {\r\n-    return function(config) {\r\n-        const token = getToken();\r\n-        const defaultConfig = {\r\n-            headers: {\r\n-            // Carry Token\r\n-                Authorization: token ? `Bearer ${token}` : undefined,\r\n-                \"Content-Type\": \"application/json\"\r\n-            },\r\n-            timeout: 5000,\r\n-            // baseURL: import.meta.env.VITE_BASE_API,\r\n-            baseURL: 'https://reqres.in/api/',\r\n-            data: {}\r\n-        };\r\n-        const mergeConfig = merge(defaultConfig, config);\r\n-        return service(mergeConfig);\r\n-    };\r\n-}\r\n-\r\n-export const request = createRequest(axios)\n-// import axios from 'axios'\r\n-\r\n-// axios.defaults.timeout = 5000\r\n-// axios.defaults.baseURL = 'https://reqres.in/api/'\r\n-// axios.interceptors.request.use(\r\n-//     (config) => config,\r\n-//     (error) => Promise.reject(error)\r\n-//     // config => {\r\n-//     //     if (store.state.token) {\r\n-//     //         config.headers.Authorization = `token ${store.state.token}`\r\n-//     //     }\r\n-//     //     return config\r\n-//     // },\r\n-//     // err => {\r\n-//     //     return Promise.reject(err)\r\n-//     // },\r\n-// )\r\n-// axios.interceptors.response.use(\r\n-//     response => {\r\n-//         return response\r\n-//     },\r\n-//     error => {\r\n-//         if (error.response) {\r\n-//         switch (error.response.status) {\r\n-//             case 401:\r\n-//             router.currentRoute.path !== 'login' &&\r\n-//             router.replace({\r\n-//                 path: 'login',\r\n-//                 query: { redirect: router.currentRoute.path },\r\n-//             })\r\n-//         }\r\n-//     }\r\n-//         return Promise.reject(error.response.data)\r\n-//     },\r\n-// )\r\n-\r\n-\r\n-// export default axios\r\n-function createRequest(service) {\r\n-    return function(config) {\r\n-        const token = getToken();\r\n-        const defaultConfig = {\r\n-            headers: {\r\n-            // Carry Token\r\n-                Authorization: token ? `Bearer ${token}` : undefined,\r\n-                \"Content-Type\": \"application/json\"\r\n-            },\r\n-            timeout: 5000,\r\n-            // baseURL: import.meta.env.VITE_BASE_API,\r\n-            baseURL: 'https://reqres.in/api/',\r\n-            data: {}\r\n-        };\r\n-        const mergeConfig = merge(defaultConfig, config);\r\n-        return service(mergeConfig);\r\n-    };\r\n-}\r\n-\r\n-export const request = createRequest(service)\n\\ No newline at end of file\n+export const request = createRequest(axios)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691471374902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,58 @@\n+// import axios from 'axios'\r\n+// axios.defaults.timeout = 5000\r\n+// axios.defaults.baseURL = 'https://reqres.in/api/'\r\n+// axios.interceptors.request.use(\r\n+//     (config) => config,\r\n+//     (error) => Promise.reject(error)\r\n+//     // config => {\r\n+//     //     if (store.state.token) {\r\n+//     //         config.headers.Authorization = `token ${store.state.token}`\r\n+//     //     }\r\n+//     //     return config\r\n+//     // },\r\n+//     // err => {\r\n+//     //     return Promise.reject(err)\r\n+//     // },\r\n+// )\r\n+// axios.interceptors.response.use(\r\n+//     response => {\r\n+//         return response\r\n+//     },\r\n+//     error => {\r\n+//         if (error.response) {\r\n+//         switch (error.response.status) {\r\n+//             case 401:\r\n+//             router.currentRoute.path !== 'login' &&\r\n+//             router.replace({\r\n+//                 path: 'login',\r\n+//                 query: { redirect: router.currentRoute.path },\r\n+//             })\r\n+//         }\r\n+//     }\r\n+//         return Promise.reject(error.response.data)\r\n+//     },\r\n+// )\r\n+\r\n+import axios from \"axios\";\r\n+import {getToken} from '../utils/cookie'\r\n+import { merge } from \"lodash-es\"\r\n+// export default axios\r\n+function createRequest(service) {\r\n+    return function(config) {\r\n+        const token = getToken();\r\n+        const defaultConfig = {\r\n+            headers: {\r\n+            // Carry Token\r\n+                Authorization: token ? `Bearer ${token}` : undefined,\r\n+                \"Content-Type\": \"application/json\"\r\n+            },\r\n+            timeout: 5000,\r\n+            // baseURL: import.meta.env.VITE_BASE_API,\r\n+            baseURL: 'https://reqres.in/api/',\r\n+            data: {}\r\n+        };\r\n+        const mergeConfig = merge(defaultConfig, config);\r\n+        return service(mergeConfig);\r\n+    };\r\n+}\r\n+export const request = createRequest(axios)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691471601546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,59 @@\n+// import axios from 'axios'\r\n+// axios.defaults.timeout = 5000\r\n+// axios.defaults.baseURL = 'https://reqres.in/api/'\r\n+// axios.interceptors.request.use(\r\n+//     (config) => config,\r\n+//     (error) => Promise.reject(error)\r\n+//     // config => {\r\n+//     //     if (store.state.token) {\r\n+//     //         config.headers.Authorization = `token ${store.state.token}`\r\n+//     //     }\r\n+//     //     return config\r\n+//     // },\r\n+//     // err => {\r\n+//     //     return Promise.reject(err)\r\n+//     // },\r\n+// )\r\n+// axios.interceptors.response.use(\r\n+//     response => {\r\n+//         return response\r\n+//     },\r\n+//     error => {\r\n+//         if (error.response) {\r\n+//         switch (error.response.status) {\r\n+//             case 401:\r\n+//             router.currentRoute.path !== 'login' &&\r\n+//             router.replace({\r\n+//                 path: 'login',\r\n+//                 query: { redirect: router.currentRoute.path },\r\n+//             })\r\n+//         }\r\n+//     }\r\n+//         return Promise.reject(error.response.data)\r\n+//     },\r\n+// )\r\n+\r\n+import axios from \"axios\";\r\n+import {getToken} from '../utils/cookie'\r\n+import { merge } from \"lodash-es\"\r\n+// export default axios\r\n+function createRequest(service) {\r\n+    return function(config) {\r\n+        const token = getToken();\r\n+        console.log('token' , token)\r\n+        const defaultConfig = {\r\n+            headers: {\r\n+            // Carry Token\r\n+                Authorization: token ? `Bearer ${token}` : undefined,\r\n+                \"Content-Type\": \"application/json\"\r\n+            },\r\n+            timeout: 5000,\r\n+            // baseURL: import.meta.env.VITE_BASE_API,\r\n+            baseURL: 'https://reqres.in/api/',\r\n+            data: {}\r\n+        };\r\n+        const mergeConfig = merge(defaultConfig, config);\r\n+        return service(mergeConfig);\r\n+    };\r\n+}\r\n+export const request = createRequest(axios)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691472770284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n //     },\r\n // )\r\n \r\n import axios from \"axios\";\r\n-import {getToken} from '../utils/cookie'\r\n+import { getToken } from '../utils/cookie'\r\n import { merge } from \"lodash-es\"\r\n // export default axios\r\n function createRequest(service) {\r\n     return function(config) {\r\n@@ -55,120 +55,5 @@\n         const mergeConfig = merge(defaultConfig, config);\r\n         return service(mergeConfig);\r\n     };\r\n }\r\n-export const request = createRequest(axios)\n-// import axios from 'axios'\r\n-// axios.defaults.timeout = 5000\r\n-// axios.defaults.baseURL = 'https://reqres.in/api/'\r\n-// axios.interceptors.request.use(\r\n-//     (config) => config,\r\n-//     (error) => Promise.reject(error)\r\n-//     // config => {\r\n-//     //     if (store.state.token) {\r\n-//     //         config.headers.Authorization = `token ${store.state.token}`\r\n-//     //     }\r\n-//     //     return config\r\n-//     // },\r\n-//     // err => {\r\n-//     //     return Promise.reject(err)\r\n-//     // },\r\n-// )\r\n-// axios.interceptors.response.use(\r\n-//     response => {\r\n-//         return response\r\n-//     },\r\n-//     error => {\r\n-//         if (error.response) {\r\n-//         switch (error.response.status) {\r\n-//             case 401:\r\n-//             router.currentRoute.path !== 'login' &&\r\n-//             router.replace({\r\n-//                 path: 'login',\r\n-//                 query: { redirect: router.currentRoute.path },\r\n-//             })\r\n-//         }\r\n-//     }\r\n-//         return Promise.reject(error.response.data)\r\n-//     },\r\n-// )\r\n-\r\n-import axios from \"axios\";\r\n-import {getToken} from '../utils/cookie'\r\n-import { merge } from \"lodash-es\"\r\n-// export default axios\r\n-function createRequest(service) {\r\n-    return function(config) {\r\n-        const token = getToken();\r\n-        const defaultConfig = {\r\n-            headers: {\r\n-            // Carry Token\r\n-                Authorization: token ? `Bearer ${token}` : undefined,\r\n-                \"Content-Type\": \"application/json\"\r\n-            },\r\n-            timeout: 5000,\r\n-            // baseURL: import.meta.env.VITE_BASE_API,\r\n-            baseURL: 'https://reqres.in/api/',\r\n-            data: {}\r\n-        };\r\n-        const mergeConfig = merge(defaultConfig, config);\r\n-        return service(mergeConfig);\r\n-    };\r\n-}\r\n-export const request = createRequest(axios)\n-// import axios from 'axios'\r\n-// axios.defaults.timeout = 5000\r\n-// axios.defaults.baseURL = 'https://reqres.in/api/'\r\n-// axios.interceptors.request.use(\r\n-//     (config) => config,\r\n-//     (error) => Promise.reject(error)\r\n-//     // config => {\r\n-//     //     if (store.state.token) {\r\n-//     //         config.headers.Authorization = `token ${store.state.token}`\r\n-//     //     }\r\n-//     //     return config\r\n-//     // },\r\n-//     // err => {\r\n-//     //     return Promise.reject(err)\r\n-//     // },\r\n-// )\r\n-// axios.interceptors.response.use(\r\n-//     response => {\r\n-//         return response\r\n-//     },\r\n-//     error => {\r\n-//         if (error.response) {\r\n-//         switch (error.response.status) {\r\n-//             case 401:\r\n-//             router.currentRoute.path !== 'login' &&\r\n-//             router.replace({\r\n-//                 path: 'login',\r\n-//                 query: { redirect: router.currentRoute.path },\r\n-//             })\r\n-//         }\r\n-//     }\r\n-//         return Promise.reject(error.response.data)\r\n-//     },\r\n-// )\r\n-\r\n-import axios from \"axios\";\r\n-import {getToken} from '../utils/cookie'\r\n-// export default axios\r\n-function createRequest(service) {\r\n-    return function(config) {\r\n-        const token = getToken();\r\n-        const defaultConfig = {\r\n-            headers: {\r\n-            // Carry Token\r\n-                Authorization: token ? `Bearer ${token}` : undefined,\r\n-                \"Content-Type\": \"application/json\"\r\n-            },\r\n-            timeout: 5000,\r\n-            // baseURL: import.meta.env.VITE_BASE_API,\r\n-            baseURL: 'https://reqres.in/api/',\r\n-            data: {}\r\n-        };\r\n-        const mergeConfig = merge(defaultConfig, config);\r\n-        return service(mergeConfig);\r\n-    };\r\n-}\r\n export const request = createRequest(axios)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691474839683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,13 +35,15 @@\n \r\n import axios from \"axios\";\r\n import { getToken } from '../utils/cookie'\r\n import { merge } from \"lodash-es\"\r\n+import Cookies from 'js-cookie';\r\n // export default axios\r\n function createRequest(service) {\r\n     return function(config) {\r\n         const token = getToken();\r\n         console.log('token' , token)\r\n+        console.log( Cookies.get('token'))\r\n         const defaultConfig = {\r\n             headers: {\r\n             // Carry Token\r\n                 Authorization: token ? `Bearer ${token}` : undefined,\r\n"
                },
                {
                    "date": 1691474844822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,61 @@\n+// import axios from 'axios'\r\n+// axios.defaults.timeout = 5000\r\n+// axios.defaults.baseURL = 'https://reqres.in/api/'\r\n+// axios.interceptors.request.use(\r\n+//     (config) => config,\r\n+//     (error) => Promise.reject(error)\r\n+//     // config => {\r\n+//     //     if (store.state.token) {\r\n+//     //         config.headers.Authorization = `token ${store.state.token}`\r\n+//     //     }\r\n+//     //     return config\r\n+//     // },\r\n+//     // err => {\r\n+//     //     return Promise.reject(err)\r\n+//     // },\r\n+// )\r\n+// axios.interceptors.response.use(\r\n+//     response => {\r\n+//         return response\r\n+//     },\r\n+//     error => {\r\n+//         if (error.response) {\r\n+//         switch (error.response.status) {\r\n+//             case 401:\r\n+//             router.currentRoute.path !== 'login' &&\r\n+//             router.replace({\r\n+//                 path: 'login',\r\n+//                 query: { redirect: router.currentRoute.path },\r\n+//             })\r\n+//         }\r\n+//     }\r\n+//         return Promise.reject(error.response.data)\r\n+//     },\r\n+// )\r\n+\r\n+import axios from \"axios\";\r\n+import { getToken } from '../utils/cookie'\r\n+import { merge } from \"lodash-es\"\r\n+import Cookies from 'js-cookie';\r\n+// export default axios\r\n+function createRequest(service) {\r\n+    return function(config) {\r\n+        const token = getToken();\r\n+        console.log('token' , token)\r\n+        console.log(Cookies.get('token'))\r\n+        const defaultConfig = {\r\n+            headers: {\r\n+            // Carry Token\r\n+                Authorization: token ? `Bearer ${token}` : undefined,\r\n+                \"Content-Type\": \"application/json\"\r\n+            },\r\n+            timeout: 5000,\r\n+            // baseURL: import.meta.env.VITE_BASE_API,\r\n+            baseURL: 'https://reqres.in/api/',\r\n+            data: {}\r\n+        };\r\n+        const mergeConfig = merge(defaultConfig, config);\r\n+        return service(mergeConfig);\r\n+    };\r\n+}\r\n+export const request = createRequest(axios)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691474885256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,14 +40,12 @@\n // export default axios\r\n function createRequest(service) {\r\n     return function(config) {\r\n         const token = getToken();\r\n-        console.log('token' , token)\r\n-        console.log(Cookies.get('token'))\r\n         const defaultConfig = {\r\n             headers: {\r\n             // Carry Token\r\n-                Authorization: token ? `Bearer ${token}` : undefined,\r\n+                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n                 \"Content-Type\": \"application/json\"\r\n             },\r\n             timeout: 5000,\r\n             // baseURL: import.meta.env.VITE_BASE_API,\r\n@@ -57,66 +55,5 @@\n         const mergeConfig = merge(defaultConfig, config);\r\n         return service(mergeConfig);\r\n     };\r\n }\r\n-export const request = createRequest(axios)\n-// import axios from 'axios'\r\n-// axios.defaults.timeout = 5000\r\n-// axios.defaults.baseURL = 'https://reqres.in/api/'\r\n-// axios.interceptors.request.use(\r\n-//     (config) => config,\r\n-//     (error) => Promise.reject(error)\r\n-//     // config => {\r\n-//     //     if (store.state.token) {\r\n-//     //         config.headers.Authorization = `token ${store.state.token}`\r\n-//     //     }\r\n-//     //     return config\r\n-//     // },\r\n-//     // err => {\r\n-//     //     return Promise.reject(err)\r\n-//     // },\r\n-// )\r\n-// axios.interceptors.response.use(\r\n-//     response => {\r\n-//         return response\r\n-//     },\r\n-//     error => {\r\n-//         if (error.response) {\r\n-//         switch (error.response.status) {\r\n-//             case 401:\r\n-//             router.currentRoute.path !== 'login' &&\r\n-//             router.replace({\r\n-//                 path: 'login',\r\n-//                 query: { redirect: router.currentRoute.path },\r\n-//             })\r\n-//         }\r\n-//     }\r\n-//         return Promise.reject(error.response.data)\r\n-//     },\r\n-// )\r\n-\r\n-import axios from \"axios\";\r\n-import { getToken } from '../utils/cookie'\r\n-import { merge } from \"lodash-es\"\r\n-import Cookies from 'js-cookie';\r\n-// export default axios\r\n-function createRequest(service) {\r\n-    return function(config) {\r\n-        const token = getToken();\r\n-        console.log('token' , token)\r\n-        console.log( Cookies.get('token'))\r\n-        const defaultConfig = {\r\n-            headers: {\r\n-            // Carry Token\r\n-                Authorization: token ? `Bearer ${token}` : undefined,\r\n-                \"Content-Type\": \"application/json\"\r\n-            },\r\n-            timeout: 5000,\r\n-            // baseURL: import.meta.env.VITE_BASE_API,\r\n-            baseURL: 'https://reqres.in/api/',\r\n-            data: {}\r\n-        };\r\n-        const mergeConfig = merge(defaultConfig, config);\r\n-        return service(mergeConfig);\r\n-    };\r\n-}\r\n export const request = createRequest(axios)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691474895676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,59 @@\n+// import axios from 'axios'\r\n+// axios.defaults.timeout = 5000\r\n+// axios.defaults.baseURL = 'https://reqres.in/api/'\r\n+// axios.interceptors.request.use(\r\n+//     (config) => config,\r\n+//     (error) => Promise.reject(error)\r\n+//     // config => {\r\n+//     //     if (store.state.token) {\r\n+//     //         config.headers.Authorization = `token ${store.state.token}`\r\n+//     //     }\r\n+//     //     return config\r\n+//     // },\r\n+//     // err => {\r\n+//     //     return Promise.reject(err)\r\n+//     // },\r\n+// )\r\n+// axios.interceptors.response.use(\r\n+//     response => {\r\n+//         return response\r\n+//     },\r\n+//     error => {\r\n+//         if (error.response) {\r\n+//         switch (error.response.status) {\r\n+//             case 401:\r\n+//             router.currentRoute.path !== 'login' &&\r\n+//             router.replace({\r\n+//                 path: 'login',\r\n+//                 query: { redirect: router.currentRoute.path },\r\n+//             })\r\n+//         }\r\n+//     }\r\n+//         return Promise.reject(error.response.data)\r\n+//     },\r\n+// )\r\n+\r\n+import axios from \"axios\";\r\n+// import { getToken } from '../utils/cookie'\r\n+import { merge } from \"lodash-es\"\r\n+import Cookies from 'js-cookie';\r\n+// export default axios\r\n+function createRequest(service) {\r\n+    return function(config) {\r\n+        // const token = getToken();\r\n+        const defaultConfig = {\r\n+            headers: {\r\n+            // Carry Token\r\n+                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n+                \"Content-Type\": \"application/json\"\r\n+            },\r\n+            timeout: 5000,\r\n+            // baseURL: import.meta.env.VITE_BASE_API,\r\n+            baseURL: 'https://reqres.in/api/',\r\n+            data: {}\r\n+        };\r\n+        const mergeConfig = merge(defaultConfig, config);\r\n+        return service(mergeConfig);\r\n+    };\r\n+}\r\n+export const request = createRequest(axios)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691555203547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,26 @@\n+\r\n+import axios from \"axios\";\r\n+// import { getToken } from '../utils/cookie'\r\n+import { merge } from \"lodash-es\"\r\n+import Cookies from 'js-cookie';\r\n+// export default axios\r\n+function createRequest(service) {\r\n+    return function(config) {\r\n+        // const token = getToken();\r\n+        const defaultConfig = {\r\n+            headers: {\r\n+            // Carry Token\r\n+                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n+                \"Content-Type\": \"application/json\"\r\n+            },\r\n+            timeout: 5000,\r\n+            // baseURL: import.meta.env.VITE_BASE_API,\r\n+            // baseURL: 'https://reqres.in/api/',\r\n+            baseURL:'https://api.escuelajs.co/',\r\n+            data: {}\r\n+        };\r\n+        const mergeConfig = merge(defaultConfig, config);\r\n+        return service(mergeConfig);\r\n+    };\r\n+}\r\n+export const request = createRequest(axios)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691555659880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,130 +15,12 @@\n             },\r\n             timeout: 5000,\r\n             // baseURL: import.meta.env.VITE_BASE_API,\r\n             // baseURL: 'https://reqres.in/api/',\r\n-            baseURL:'https://api.escuelajs.co/',\r\n+            baseURL: 'https://api.escuelajs.co/api/v1/auth/',\r\n             data: {}\r\n         };\r\n         const mergeConfig = merge(defaultConfig, config);\r\n         return service(mergeConfig);\r\n     };\r\n }\r\n-export const request = createRequest(axios)\n-// import axios from 'axios'\r\n-// axios.defaults.timeout = 5000\r\n-// axios.defaults.baseURL = 'https://reqres.in/api/'\r\n-// axios.interceptors.request.use(\r\n-//     (config) => config,\r\n-//     (error) => Promise.reject(error)\r\n-//     // config => {\r\n-//     //     if (store.state.token) {\r\n-//     //         config.headers.Authorization = `token ${store.state.token}`\r\n-//     //     }\r\n-//     //     return config\r\n-//     // },\r\n-//     // err => {\r\n-//     //     return Promise.reject(err)\r\n-//     // },\r\n-// )\r\n-// axios.interceptors.response.use(\r\n-//     response => {\r\n-//         return response\r\n-//     },\r\n-//     error => {\r\n-//         if (error.response) {\r\n-//         switch (error.response.status) {\r\n-//             case 401:\r\n-//             router.currentRoute.path !== 'login' &&\r\n-//             router.replace({\r\n-//                 path: 'login',\r\n-//                 query: { redirect: router.currentRoute.path },\r\n-//             })\r\n-//         }\r\n-//     }\r\n-//         return Promise.reject(error.response.data)\r\n-//     },\r\n-// )\r\n-\r\n-import axios from \"axios\";\r\n-// import { getToken } from '../utils/cookie'\r\n-import { merge } from \"lodash-es\"\r\n-import Cookies from 'js-cookie';\r\n-// export default axios\r\n-function createRequest(service) {\r\n-    return function(config) {\r\n-        // const token = getToken();\r\n-        const defaultConfig = {\r\n-            headers: {\r\n-            // Carry Token\r\n-                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n-                \"Content-Type\": \"application/json\"\r\n-            },\r\n-            timeout: 5000,\r\n-            // baseURL: import.meta.env.VITE_BASE_API,\r\n-            baseURL: 'https://reqres.in/api/',\r\n-            data: {}\r\n-        };\r\n-        const mergeConfig = merge(defaultConfig, config);\r\n-        return service(mergeConfig);\r\n-    };\r\n-}\r\n-export const request = createRequest(axios)\n-// import axios from 'axios'\r\n-// axios.defaults.timeout = 5000\r\n-// axios.defaults.baseURL = 'https://reqres.in/api/'\r\n-// axios.interceptors.request.use(\r\n-//     (config) => config,\r\n-//     (error) => Promise.reject(error)\r\n-//     // config => {\r\n-//     //     if (store.state.token) {\r\n-//     //         config.headers.Authorization = `token ${store.state.token}`\r\n-//     //     }\r\n-//     //     return config\r\n-//     // },\r\n-//     // err => {\r\n-//     //     return Promise.reject(err)\r\n-//     // },\r\n-// )\r\n-// axios.interceptors.response.use(\r\n-//     response => {\r\n-//         return response\r\n-//     },\r\n-//     error => {\r\n-//         if (error.response) {\r\n-//         switch (error.response.status) {\r\n-//             case 401:\r\n-//             router.currentRoute.path !== 'login' &&\r\n-//             router.replace({\r\n-//                 path: 'login',\r\n-//                 query: { redirect: router.currentRoute.path },\r\n-//             })\r\n-//         }\r\n-//     }\r\n-//         return Promise.reject(error.response.data)\r\n-//     },\r\n-// )\r\n-\r\n-import axios from \"axios\";\r\n-import { getToken } from '../utils/cookie'\r\n-import { merge } from \"lodash-es\"\r\n-import Cookies from 'js-cookie';\r\n-// export default axios\r\n-function createRequest(service) {\r\n-    return function(config) {\r\n-        const token = getToken();\r\n-        const defaultConfig = {\r\n-            headers: {\r\n-            // Carry Token\r\n-                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n-                \"Content-Type\": \"application/json\"\r\n-            },\r\n-            timeout: 5000,\r\n-            // baseURL: import.meta.env.VITE_BASE_API,\r\n-            baseURL: 'https://reqres.in/api/',\r\n-            data: {}\r\n-        };\r\n-        const mergeConfig = merge(defaultConfig, config);\r\n-        return service(mergeConfig);\r\n-    };\r\n-}\r\n export const request = createRequest(axios)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691981577347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,62 @@\n-\r\n import axios from \"axios\";\r\n-// import { getToken } from '../utils/cookie'\r\n import { merge } from \"lodash-es\"\r\n import Cookies from 'js-cookie';\r\n-// export default axios\r\n+\r\n function createRequest(service) {\r\n+    const instance = service.create();\r\n+\r\n+    instance.interceptors.response.use(\r\n+        function (response) {\r\n+            return response;\r\n+        },\r\n+        function (error) {\r\n+            if (error.response) {\r\n+                switch (error.response.status) {\r\n+                    case 401:\r\n+                        //重新授權\r\n+                        const refreshToken = Cookies.get('refreshToken');\r\n+                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token', { refreshToken });\r\n+                        Cookies.set('token', data.access_token);\r\n+                        Cookies.set('refresh_token', data.refresh_token);\r\n+                        console.log(error.message);\r\n+                        alert('未授權請重新登入')\r\n+                        break;\r\n\\ No newline at end of file\n+                    case 401:\r\n+                        alert('拒絕訪問')\r\n+                        break;\r\n+                    case 404:\r\n+                        console.log(error.message);\r\n+                        alert('資料來源不存在')\r\n+                        break;\r\n+                    case 500:\r\n+                        console.log(error.message);\r\n+                        alert('內部系統發生錯誤')\r\n+                        break;\r\n+                    default:\r\n+                        console.log(error.message);\r\n+                }\r\n+            }\r\n+            if (!window.navigator.onLine) {\r\n+                alert(\"請重新連線後重整網頁\");\r\n+                return;\r\n+            }\r\n+            return Promise.reject(error);\r\n+        },\r\n+    );\r\n+\r\n     return function(config) {\r\n-        // const token = getToken();\r\n         const defaultConfig = {\r\n             headers: {\r\n-            // Carry Token\r\n                 Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n                 \"Content-Type\": \"application/json\"\r\n             },\r\n             timeout: 5000,\r\n-            // baseURL: import.meta.env.VITE_BASE_API,\r\n-            // baseURL: 'https://reqres.in/api/',\r\n-            baseURL: 'https://api.escuelajs.co/api/v1/auth/',\r\n+            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n             data: {}\r\n         };\r\n         const mergeConfig = merge(defaultConfig, config);\r\n-        return service(mergeConfig);\r\n+        return instance(mergeConfig);\r\n     };\r\n }\r\n-export const request = createRequest(axios)\n+\r\n+export const request = createRequest(axios);\r\n"
                },
                {
                    "date": 1691985638976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+import axios from \"axios\";\r\n+import { merge } from \"lodash-es\"\r\n+import Cookies from 'js-cookie';\r\n+\r\n+function createRequest(service) {\r\n+    const instance = service.create();\r\n+\r\n+    instance.interceptors.response.use(\r\n+        function (response) {\r\n+            return response;\r\n+        },\r\n+        function (error) {\r\n+            if (error.response) {\r\n+                switch (error.response.status) {\r\n+                    case 401:\r\n+                        //重新授權\r\n+                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\");\r\n+                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token', { refreshToken });\r\n+                        Cookies.set('token', data.access_token);\r\n+                        Cookies.set('refresh_token', data.refresh_token);\r\n+                        console.log(error.message);\r\n+                        alert('未授權請重新登入')\r\n+                        break;\r\n+                    case 401:\r\n+                        alert('拒絕訪問')\r\n+                        break;\r\n+                    case 404:\r\n+                        console.log(error.message);\r\n+                        alert('資料來源不存在')\r\n+                        break;\r\n+                    case 500:\r\n+                        console.log(error.message);\r\n+                        alert('內部系統發生錯誤')\r\n+                        break;\r\n+                    default:\r\n+                        console.log(error.message);\r\n+                }\r\n+            }\r\n+            if (!window.navigator.onLine) {\r\n+                alert(\"請重新連線後重整網頁\");\r\n+                return;\r\n+            }\r\n+            return Promise.reject(error);\r\n+        },\r\n+    );\r\n+\r\n+    return function(config) {\r\n+        const defaultConfig = {\r\n+            headers: {\r\n+                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n+                \"Content-Type\": \"application/json\"\r\n+            },\r\n+            timeout: 5000,\r\n+            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n+            data: {}\r\n+        };\r\n+        const mergeConfig = merge(defaultConfig, config);\r\n+        return instance(mergeConfig);\r\n+    };\r\n+}\r\n+\r\n+export const request = createRequest(axios);\r\n"
                },
                {
                    "date": 1692146897306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+import axios from \"axios\";\r\n+import { merge } from \"lodash-es\"\r\n+import Cookies from 'js-cookie';\r\n+\r\n+function createRequest(service) {\r\n+    const instance = service.create();\r\n+\r\n+    instance.interceptors.response.use(\r\n+        function (response) {\r\n+            return response;\r\n+        },\r\n+        function (error) {\r\n+            if (error.response) {\r\n+                switch (error.response.status) {\r\n+                    case 401:\r\n+                        //重新授權\r\n+                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\");\r\n+                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token', { refreshToken });\r\n+                        Cookies.set('token', data.access_token);\r\n+                        Cookies.set('refresh_token', data.refresh_token);\r\n+                        console.log(error.message);\r\n+                        alert('未授權請重新登入或重新註冊')\r\n+                        break;\r\n+                    case 401:\r\n+                        alert('拒絕訪問')\r\n+                        break;\r\n+                    case 404:\r\n+                        console.log(error.message);\r\n+                        alert('資料來源不存在')\r\n+                        break;\r\n+                    case 500:\r\n+                        console.log(error.message);\r\n+                        alert('內部系統發生錯誤')\r\n+                        break;\r\n+                    default:\r\n+                        console.log(error.message);\r\n+                }\r\n+            }\r\n+            if (!window.navigator.onLine) {\r\n+                alert(\"請重新連線後重整網頁\");\r\n+                return;\r\n+            }\r\n+            return Promise.reject(error);\r\n+        },\r\n+    );\r\n+\r\n+    return function(config) {\r\n+        const defaultConfig = {\r\n+            headers: {\r\n+                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n+                \"Content-Type\": \"application/json\"\r\n+            },\r\n+            timeout: 5000,\r\n+            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n+            data: {}\r\n+        };\r\n+        const mergeConfig = merge(defaultConfig, config);\r\n+        return instance(mergeConfig);\r\n+    };\r\n+}\r\n+\r\n+export const request = createRequest(axios);\r\n"
                },
                {
                    "date": 1692147225320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+import axios from \"axios\";\r\n+import { merge } from \"lodash-es\"\r\n+import Cookies from 'js-cookie';\r\n+\r\n+function createRequest(service) {\r\n+    const instance = service.create();\r\n+\r\n+    instance.interceptors.response.use(\r\n+        function (response) {\r\n+            return response;\r\n+        },\r\n+        function (error) {\r\n+            if (error.response) {\r\n+                switch (error.response.status) {\r\n+                    case 401:\r\n+                        //重新授權\r\n+                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\");\r\n+                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token', { refreshToken });\r\n+                        Cookies.set('token', data.access_token);\r\n+                        Cookies.set('refresh_token', data.refresh_token);\r\n+                        console.log(error.message);\r\n+                        alert('未授權請重新登入或重新註冊')\r\n+                        break;\r\n+                    case 401:\r\n+                        alert('拒絕訪問')\r\n+                        break;\r\n+                    // case 404:\r\n+                    //     console.log(error.message);\r\n+                    //     alert('資料來源不存在')\r\n+                    //     break;\r\n+                    case 500:\r\n+                        console.log(error.message);\r\n+                        alert('內部系統發生錯誤')\r\n+                        break;\r\n+                    default:\r\n+                        console.log(error.message);\r\n+                }\r\n+            }\r\n+            if (!window.navigator.onLine) {\r\n+                alert(\"請重新連線後重整網頁\");\r\n+                return;\r\n+            }\r\n+            return Promise.reject(error);\r\n+        },\r\n+    );\r\n+\r\n+    return function(config) {\r\n+        const defaultConfig = {\r\n+            headers: {\r\n+                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n+                \"Content-Type\": \"application/json\"\r\n+            },\r\n+            timeout: 5000,\r\n+            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n+            data: {}\r\n+        };\r\n+        const mergeConfig = merge(defaultConfig, config);\r\n+        return instance(mergeConfig);\r\n+    };\r\n+}\r\n+\r\n+export const request = createRequest(axios);\r\n"
                },
                {
                    "date": 1692152793696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n             if (error.response) {\r\n                 switch (error.response.status) {\r\n                     case 401:\r\n                         //重新授權\r\n-                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\");\r\n+                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\") || Math.random().toString(36).substring(7);\r\n                         const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token', { refreshToken });\r\n                         Cookies.set('token', data.access_token);\r\n                         Cookies.set('refresh_token', data.refresh_token);\r\n                         console.log(error.message);\r\n@@ -59,190 +59,4 @@\n     };\r\n }\r\n \r\n export const request = createRequest(axios);\r\n-import axios from \"axios\";\r\n-import { merge } from \"lodash-es\"\r\n-import Cookies from 'js-cookie';\r\n-\r\n-function createRequest(service) {\r\n-    const instance = service.create();\r\n-\r\n-    instance.interceptors.response.use(\r\n-        function (response) {\r\n-            return response;\r\n-        },\r\n-        function (error) {\r\n-            if (error.response) {\r\n-                switch (error.response.status) {\r\n-                    case 401:\r\n-                        //重新授權\r\n-                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\");\r\n-                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token', { refreshToken });\r\n-                        Cookies.set('token', data.access_token);\r\n-                        Cookies.set('refresh_token', data.refresh_token);\r\n-                        console.log(error.message);\r\n-                        alert('未授權請重新登入或重新註冊')\r\n-                        break;\r\n-                    case 401:\r\n-                        alert('拒絕訪問')\r\n-                        break;\r\n-                    case 404:\r\n-                        console.log(error.message);\r\n-                        alert('資料來源不存在')\r\n-                        break;\r\n-                    case 500:\r\n-                        console.log(error.message);\r\n-                        alert('內部系統發生錯誤')\r\n-                        break;\r\n-                    default:\r\n-                        console.log(error.message);\r\n-                }\r\n-            }\r\n-            if (!window.navigator.onLine) {\r\n-                alert(\"請重新連線後重整網頁\");\r\n-                return;\r\n-            }\r\n-            return Promise.reject(error);\r\n-        },\r\n-    );\r\n-\r\n-    return function(config) {\r\n-        const defaultConfig = {\r\n-            headers: {\r\n-                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n-                \"Content-Type\": \"application/json\"\r\n-            },\r\n-            timeout: 5000,\r\n-            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n-            data: {}\r\n-        };\r\n-        const mergeConfig = merge(defaultConfig, config);\r\n-        return instance(mergeConfig);\r\n-    };\r\n-}\r\n-\r\n-export const request = createRequest(axios);\r\n-import axios from \"axios\";\r\n-import { merge } from \"lodash-es\"\r\n-import Cookies from 'js-cookie';\r\n-\r\n-function createRequest(service) {\r\n-    const instance = service.create();\r\n-\r\n-    instance.interceptors.response.use(\r\n-        function (response) {\r\n-            return response;\r\n-        },\r\n-        function (error) {\r\n-            if (error.response) {\r\n-                switch (error.response.status) {\r\n-                    case 401:\r\n-                        //重新授權\r\n-                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\");\r\n-                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token', { refreshToken });\r\n-                        Cookies.set('token', data.access_token);\r\n-                        Cookies.set('refresh_token', data.refresh_token);\r\n-                        console.log(error.message);\r\n-                        alert('未授權請重新登入')\r\n-                        break;\r\n-                    case 401:\r\n-                        alert('拒絕訪問')\r\n-                        break;\r\n-                    case 404:\r\n-                        console.log(error.message);\r\n-                        alert('資料來源不存在')\r\n-                        break;\r\n-                    case 500:\r\n-                        console.log(error.message);\r\n-                        alert('內部系統發生錯誤')\r\n-                        break;\r\n-                    default:\r\n-                        console.log(error.message);\r\n-                }\r\n-            }\r\n-            if (!window.navigator.onLine) {\r\n-                alert(\"請重新連線後重整網頁\");\r\n-                return;\r\n-            }\r\n-            return Promise.reject(error);\r\n-        },\r\n-    );\r\n-\r\n-    return function(config) {\r\n-        const defaultConfig = {\r\n-            headers: {\r\n-                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n-                \"Content-Type\": \"application/json\"\r\n-            },\r\n-            timeout: 5000,\r\n-            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n-            data: {}\r\n-        };\r\n-        const mergeConfig = merge(defaultConfig, config);\r\n-        return instance(mergeConfig);\r\n-    };\r\n-}\r\n-\r\n-export const request = createRequest(axios);\r\n-import axios from \"axios\";\r\n-import { merge } from \"lodash-es\"\r\n-import Cookies from 'js-cookie';\r\n-\r\n-function createRequest(service) {\r\n-    const instance = service.create();\r\n-\r\n-    instance.interceptors.response.use(\r\n-        function (response) {\r\n-            return response;\r\n-        },\r\n-        function (error) {\r\n-            if (error.response) {\r\n-                switch (error.response.status) {\r\n-                    case 401:\r\n-                        //重新授權\r\n-                        const refreshToken = Cookies.get('refreshToken');\r\n-                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token', { refreshToken });\r\n-                        Cookies.set('token', data.access_token);\r\n-                        Cookies.set('refresh_token', data.refresh_token);\r\n-                        console.log(error.message);\r\n-                        alert('未授權請重新登入')\r\n-                        break;\r\n-                    case 401:\r\n-                        alert('拒絕訪問')\r\n-                        break;\r\n-                    case 404:\r\n-                        console.log(error.message);\r\n-                        alert('資料來源不存在')\r\n-                        break;\r\n-                    case 500:\r\n-                        console.log(error.message);\r\n-                        alert('內部系統發生錯誤')\r\n-                        break;\r\n-                    default:\r\n-                        console.log(error.message);\r\n-                }\r\n-            }\r\n-            if (!window.navigator.onLine) {\r\n-                alert(\"請重新連線後重整網頁\");\r\n-                return;\r\n-            }\r\n-            return Promise.reject(error);\r\n-        },\r\n-    );\r\n-\r\n-    return function(config) {\r\n-        const defaultConfig = {\r\n-            headers: {\r\n-                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n-                \"Content-Type\": \"application/json\"\r\n-            },\r\n-            timeout: 5000,\r\n-            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n-            data: {}\r\n-        };\r\n-        const mergeConfig = merge(defaultConfig, config);\r\n-        return instance(mergeConfig);\r\n-    };\r\n-}\r\n-\r\n-export const request = createRequest(axios);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1692152833096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+import axios from \"axios\";\r\n+import { merge } from \"lodash-es\"\r\n+import Cookies from 'js-cookie';\r\n+\r\n+function createRequest(service) {\r\n+    const instance = service.create();\r\n+\r\n+    instance.interceptors.response.use(\r\n+        function (response) {\r\n+            return response;\r\n+        },\r\n+        function (error) {\r\n+            if (error.response) {\r\n+                switch (error.response.status) {\r\n+                    case 401:\r\n+                        //重新授權\r\n+                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\");\r\n+                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token', { refreshToken });\r\n+                        Cookies.set('token', data.access_token);\r\n+                        Cookies.set('refresh_token', data.refresh_token);\r\n+                        console.log(error.message);\r\n+                        alert('未授權請重新登入或重新註冊')\r\n+                        break;\r\n+                    case 401:\r\n+                        alert('拒絕訪問')\r\n+                        break;\r\n+                    // case 404:\r\n+                    //     console.log(error.message);\r\n+                    //     alert('資料來源不存在')\r\n+                    //     break;\r\n+                    case 500:\r\n+                        console.log(error.message);\r\n+                        alert('內部系統發生錯誤')\r\n+                        break;\r\n+                    default:\r\n+                        console.log(error.message);\r\n+                }\r\n+            }\r\n+            if (!window.navigator.onLine) {\r\n+                alert(\"請重新連線後重整網頁\");\r\n+                return;\r\n+            }\r\n+            return Promise.reject(error);\r\n+        },\r\n+    );\r\n+\r\n+    return function(config) {\r\n+        const defaultConfig = {\r\n+            headers: {\r\n+                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n+                \"Content-Type\": \"application/json\"\r\n+            },\r\n+            timeout: 5000,\r\n+            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n+            data: {}\r\n+        };\r\n+        const mergeConfig = merge(defaultConfig, config);\r\n+        return instance(mergeConfig);\r\n+    };\r\n+}\r\n+\r\n+export const request = createRequest(axios);\r\n"
                },
                {
                    "date": 1692152941846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,70 +1,18 @@\n import axios from \"axios\";\r\n import { merge } from \"lodash-es\"\r\n import Cookies from 'js-cookie';\r\n \r\n-function createRequest(service) {\r\n-    const instance = service.create();\r\n-\r\n-    instance.interceptors.response.use(\r\n-        function (response) {\r\n-            return response;\r\n-        },\r\n-        function (error) {\r\n-            if (error.response) {\r\n-                switch (error.response.status) {\r\n-                    case 401:\r\n-                        //重新授權\r\n-                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\");\r\n-                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token', { refreshToken });\r\n-                        Cookies.set('token', data.access_token);\r\n-                        Cookies.set('refresh_token', data.refresh_token);\r\n-                        console.log(error.message);\r\n-                        alert('未授權請重新登入或重新註冊')\r\n-                        break;\r\n-                    case 401:\r\n-                        alert('拒絕訪問')\r\n-                        break;\r\n-                    // case 404:\r\n-                    //     console.log(error.message);\r\n-                    //     alert('資料來源不存在')\r\n-                    //     break;\r\n-                    case 500:\r\n-                        console.log(error.message);\r\n-                        alert('內部系統發生錯誤')\r\n-                        break;\r\n-                    default:\r\n-                        console.log(error.message);\r\n-                }\r\n-            }\r\n-            if (!window.navigator.onLine) {\r\n-                alert(\"請重新連線後重整網頁\");\r\n-                return;\r\n-            }\r\n-            return Promise.reject(error);\r\n-        },\r\n-    );\r\n-\r\n-    return function(config) {\r\n-        const defaultConfig = {\r\n-            headers: {\r\n-                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n-                \"Content-Type\": \"application/json\"\r\n-            },\r\n-            timeout: 5000,\r\n-            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n-            data: {}\r\n-        };\r\n-        const mergeConfig = merge(defaultConfig, config);\r\n-        return instance(mergeConfig);\r\n-    };\r\n+function generate_token(length){\r\n+    var a = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\".split(\"\");\r\n+    var b = [];  \r\n+    for (var i=0; i<length; i++) {\r\n+        var j = (Math.random() * (a.length-1)).toFixed(0);\r\n+        b[i] = a[j];\r\n+    }\r\n+    return b.join(\"\");\r\n }\r\n \r\n-export const request = createRequest(axios);\r\n-import axios from \"axios\";\r\n-import { merge } from \"lodash-es\"\r\n-import Cookies from 'js-cookie';\r\n-\r\n function createRequest(service) {\r\n     const instance = service.create();\r\n \r\n     instance.interceptors.response.use(\r\n@@ -75,9 +23,9 @@\n             if (error.response) {\r\n                 switch (error.response.status) {\r\n                     case 401:\r\n                         //重新授權\r\n-                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\") || Math.random().toString(36).substring(7);\r\n+                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\") || generate_token(27);\r\n                         const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token', { refreshToken });\r\n                         Cookies.set('token', data.access_token);\r\n                         Cookies.set('refresh_token', data.refresh_token);\r\n                         console.log(error.message);\r\n"
                },
                {
                    "date": 1692153025159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,93 @@\n+import axios from \"axios\";\r\n+import { merge } from \"lodash-es\"\r\n+import Cookies from 'js-cookie';\r\n+\r\n+const HMACSHA256 = (stringToSign, secret) => \"not_implemented\"\r\n+\r\n+// The header typically consists of two parts: \r\n+// the type of the token, which is JWT, and the signing algorithm being used, \r\n+// such as HMAC SHA256 or RSA.\r\n+const header = {\r\n+    \"alg\": \"HS256\",\r\n+    \"typ\": \"JWT\"\r\n+}\r\n+const encodedHeaders = btoa(JSON.stringify(header))\r\n+\r\n+\r\n+// The second part of the token is the payload, which contains the claims.\r\n+// Claims are statements about an entity (typically, the user) and \r\n+// additional data. There are three types of claims: \r\n+// registered, public, and private claims.\r\n+const claims = {\r\n+    \"role\": \"admin\"\r\n+}\r\n+const encodedPlayload = btoa(JSON.stringify(claims))\r\n+\r\n+\r\n+// create the signature part you have to take the encoded header, \r\n+// the encoded payload, a secret, the algorithm specified in the header, \r\n+// and sign that.\r\n+const signature = HMACSHA256(`${encodedHeaders}.${encodedPlayload}`, \"mysecret\")\r\n+const encodedSignature = btoa(signature)\r\n+\r\n+const jwt = `${encodedHeaders}.${encodedPlayload}.${encodedSignature}`\r\n+console.log({jwt})\r\n+\r\n+function createRequest(service) {\r\n+    const instance = service.create();\r\n+\r\n+    instance.interceptors.response.use(\r\n+        function (response) {\r\n+            return response;\r\n+        },\r\n+        function (error) {\r\n+            if (error.response) {\r\n+                switch (error.response.status) {\r\n+                    case 401:\r\n+                        //重新授權\r\n+                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\") || generate_token(32);\r\n+                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token', { refreshToken });\r\n+                        Cookies.set('token', data.access_token);\r\n+                        Cookies.set('refresh_token', data.refresh_token);\r\n+                        console.log(error.message);\r\n+                        alert('未授權請重新登入或重新註冊')\r\n+                        break;\r\n+                    case 401:\r\n+                        alert('拒絕訪問')\r\n+                        break;\r\n+                    // case 404:\r\n+                    //     console.log(error.message);\r\n+                    //     alert('資料來源不存在')\r\n+                    //     break;\r\n+                    case 500:\r\n+                        console.log(error.message);\r\n+                        alert('內部系統發生錯誤')\r\n+                        break;\r\n+                    default:\r\n+                        console.log(error.message);\r\n+                }\r\n+            }\r\n+            if (!window.navigator.onLine) {\r\n+                alert(\"請重新連線後重整網頁\");\r\n+                return;\r\n+            }\r\n+            return Promise.reject(error);\r\n+        },\r\n+    );\r\n+\r\n+    return function(config) {\r\n+        const defaultConfig = {\r\n+            headers: {\r\n+                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n+                \"Content-Type\": \"application/json\"\r\n+            },\r\n+            timeout: 5000,\r\n+            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n+            data: {}\r\n+        };\r\n+        const mergeConfig = merge(defaultConfig, config);\r\n+        return instance(mergeConfig);\r\n+    };\r\n+}\r\n+\r\n+export const request = createRequest(axios);\r\n"
                },
                {
                    "date": 1692153044859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n const signature = HMACSHA256(`${encodedHeaders}.${encodedPlayload}`, \"mysecret\")\r\n const encodedSignature = btoa(signature)\r\n \r\n const jwt = `${encodedHeaders}.${encodedPlayload}.${encodedSignature}`\r\n-console.log({jwt})\r\n+console.log({refresh_token})\r\n \r\n function createRequest(service) {\r\n     const instance = service.create();\r\n \r\n@@ -90,76 +90,4 @@\n     };\r\n }\r\n \r\n export const request = createRequest(axios);\r\n-import axios from \"axios\";\r\n-import { merge } from \"lodash-es\"\r\n-import Cookies from 'js-cookie';\r\n-\r\n-function generate_token(length){\r\n-    var a = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\".split(\"\");\r\n-    var b = [];  \r\n-    for (var i=0; i<length; i++) {\r\n-        var j = (Math.random() * (a.length-1)).toFixed(0);\r\n-        b[i] = a[j];\r\n-    }\r\n-    return b.join(\"\");\r\n-}\r\n-\r\n-function createRequest(service) {\r\n-    const instance = service.create();\r\n-\r\n-    instance.interceptors.response.use(\r\n-        function (response) {\r\n-            return response;\r\n-        },\r\n-        function (error) {\r\n-            if (error.response) {\r\n-                switch (error.response.status) {\r\n-                    case 401:\r\n-                        //重新授權\r\n-                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\") || generate_token(27);\r\n-                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token', { refreshToken });\r\n-                        Cookies.set('token', data.access_token);\r\n-                        Cookies.set('refresh_token', data.refresh_token);\r\n-                        console.log(error.message);\r\n-                        alert('未授權請重新登入或重新註冊')\r\n-                        break;\r\n-                    case 401:\r\n-                        alert('拒絕訪問')\r\n-                        break;\r\n-                    // case 404:\r\n-                    //     console.log(error.message);\r\n-                    //     alert('資料來源不存在')\r\n-                    //     break;\r\n-                    case 500:\r\n-                        console.log(error.message);\r\n-                        alert('內部系統發生錯誤')\r\n-                        break;\r\n-                    default:\r\n-                        console.log(error.message);\r\n-                }\r\n-            }\r\n-            if (!window.navigator.onLine) {\r\n-                alert(\"請重新連線後重整網頁\");\r\n-                return;\r\n-            }\r\n-            return Promise.reject(error);\r\n-        },\r\n-    );\r\n-\r\n-    return function(config) {\r\n-        const defaultConfig = {\r\n-            headers: {\r\n-                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n-                \"Content-Type\": \"application/json\"\r\n-            },\r\n-            timeout: 5000,\r\n-            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n-            data: {}\r\n-        };\r\n-        const mergeConfig = merge(defaultConfig, config);\r\n-        return instance(mergeConfig);\r\n-    };\r\n-}\r\n-\r\n-export const request = createRequest(axios);\r\n"
                },
                {
                    "date": 1692153051385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,93 @@\n+import axios from \"axios\";\r\n+import { merge } from \"lodash-es\"\r\n+import Cookies from 'js-cookie';\r\n+\r\n+const HMACSHA256 = (stringToSign, secret) => \"not_implemented\"\r\n+\r\n+// The header typically consists of two parts: \r\n+// the type of the token, which is JWT, and the signing algorithm being used, \r\n+// such as HMAC SHA256 or RSA.\r\n+const header = {\r\n+    \"alg\": \"HS256\",\r\n+    \"typ\": \"JWT\"\r\n+}\r\n+const encodedHeaders = btoa(JSON.stringify(header))\r\n+\r\n+\r\n+// The second part of the token is the payload, which contains the claims.\r\n+// Claims are statements about an entity (typically, the user) and \r\n+// additional data. There are three types of claims: \r\n+// registered, public, and private claims.\r\n+const claims = {\r\n+    \"role\": \"admin\"\r\n+}\r\n+const encodedPlayload = btoa(JSON.stringify(claims))\r\n+\r\n+\r\n+// create the signature part you have to take the encoded header, \r\n+// the encoded payload, a secret, the algorithm specified in the header, \r\n+// and sign that.\r\n+const signature = HMACSHA256(`${encodedHeaders}.${encodedPlayload}`, \"mysecret\")\r\n+const encodedSignature = btoa(signature)\r\n+\r\n+const jwt = `${encodedHeaders}.${encodedPlayload}.${encodedSignature}`\r\n+console.log({jwt})\r\n+\r\n+function createRequest(service) {\r\n+    const instance = service.create();\r\n+\r\n+    instance.interceptors.response.use(\r\n+        function (response) {\r\n+            return response;\r\n+        },\r\n+        function (error) {\r\n+            if (error.response) {\r\n+                switch (error.response.status) {\r\n+                    case 401:\r\n+                        //重新授權\r\n+                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\") || generate_token(32);\r\n+                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token', { refreshToken });\r\n+                        Cookies.set('token', data.access_token);\r\n+                        Cookies.set('refresh_token', data.refresh_token);\r\n+                        console.log(error.message);\r\n+                        alert('未授權請重新登入或重新註冊')\r\n+                        break;\r\n+                    case 401:\r\n+                        alert('拒絕訪問')\r\n+                        break;\r\n+                    // case 404:\r\n+                    //     console.log(error.message);\r\n+                    //     alert('資料來源不存在')\r\n+                    //     break;\r\n+                    case 500:\r\n+                        console.log(error.message);\r\n+                        alert('內部系統發生錯誤')\r\n+                        break;\r\n+                    default:\r\n+                        console.log(error.message);\r\n+                }\r\n+            }\r\n+            if (!window.navigator.onLine) {\r\n+                alert(\"請重新連線後重整網頁\");\r\n+                return;\r\n+            }\r\n+            return Promise.reject(error);\r\n+        },\r\n+    );\r\n+\r\n+    return function(config) {\r\n+        const defaultConfig = {\r\n+            headers: {\r\n+                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n+                \"Content-Type\": \"application/json\"\r\n+            },\r\n+            timeout: 5000,\r\n+            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n+            data: {}\r\n+        };\r\n+        const mergeConfig = merge(defaultConfig, config);\r\n+        return instance(mergeConfig);\r\n+    };\r\n+}\r\n+\r\n+export const request = createRequest(axios);\r\n"
                },
                {
                    "date": 1692153066850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,93 @@\n+import axios from \"axios\";\r\n+import { merge } from \"lodash-es\"\r\n+import Cookies from 'js-cookie';\r\n+\r\n+const HMACSHA256 = (stringToSign, secret) => \"not_implemented\"\r\n+\r\n+// The header typically consists of two parts: \r\n+// the type of the token, which is JWT, and the signing algorithm being used, \r\n+// such as HMAC SHA256 or RSA.\r\n+const header = {\r\n+    \"alg\": \"HS256\",\r\n+    \"typ\": \"JWT\"\r\n+}\r\n+const encodedHeaders = btoa(JSON.stringify(header))\r\n+\r\n+\r\n+// The second part of the token is the payload, which contains the claims.\r\n+// Claims are statements about an entity (typically, the user) and \r\n+// additional data. There are three types of claims: \r\n+// registered, public, and private claims.\r\n+const claims = {\r\n+    \"role\": \"admin\"\r\n+}\r\n+const encodedPlayload = btoa(JSON.stringify(claims))\r\n+\r\n+\r\n+// create the signature part you have to take the encoded header, \r\n+// the encoded payload, a secret, the algorithm specified in the header, \r\n+// and sign that.\r\n+const signature = HMACSHA256(`${encodedHeaders}.${encodedPlayload}`, \"mysecret\")\r\n+const encodedSignature = btoa(signature)\r\n+\r\n+const refresh_token = `${encodedHeaders}.${encodedPlayload}.${encodedSignature}`\r\n+console.log({refresh_token})\r\n+\r\n+function createRequest(service) {\r\n+    const instance = service.create();\r\n+\r\n+    instance.interceptors.response.use(\r\n+        function (response) {\r\n+            return response;\r\n+        },\r\n+        function (error) {\r\n+            if (error.response) {\r\n+                switch (error.response.status) {\r\n+                    case 401:\r\n+                        //重新授權\r\n+                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\") || {refresh_token};\r\n+                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token', { refreshToken });\r\n+                        Cookies.set('token', data.access_token);\r\n+                        Cookies.set('refresh_token', data.refresh_token);\r\n+                        console.log(error.message);\r\n+                        alert('未授權請重新登入或重新註冊')\r\n+                        break;\r\n+                    case 401:\r\n+                        alert('拒絕訪問')\r\n+                        break;\r\n+                    // case 404:\r\n+                    //     console.log(error.message);\r\n+                    //     alert('資料來源不存在')\r\n+                    //     break;\r\n+                    case 500:\r\n+                        console.log(error.message);\r\n+                        alert('內部系統發生錯誤')\r\n+                        break;\r\n+                    default:\r\n+                        console.log(error.message);\r\n+                }\r\n+            }\r\n+            if (!window.navigator.onLine) {\r\n+                alert(\"請重新連線後重整網頁\");\r\n+                return;\r\n+            }\r\n+            return Promise.reject(error);\r\n+        },\r\n+    );\r\n+\r\n+    return function(config) {\r\n+        const defaultConfig = {\r\n+            headers: {\r\n+                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n+                \"Content-Type\": \"application/json\"\r\n+            },\r\n+            timeout: 5000,\r\n+            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n+            data: {}\r\n+        };\r\n+        const mergeConfig = merge(defaultConfig, config);\r\n+        return instance(mergeConfig);\r\n+    };\r\n+}\r\n+\r\n+export const request = createRequest(axios);\r\n"
                },
                {
                    "date": 1692153093117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,93 @@\n+import axios from \"axios\";\r\n+import { merge } from \"lodash-es\"\r\n+import Cookies from 'js-cookie';\r\n+\r\n+const HMACSHA256 = (stringToSign, secret) => \"not_implemented\"\r\n+\r\n+// The header typically consists of two parts: \r\n+// the type of the token, which is JWT, and the signing algorithm being used, \r\n+// such as HMAC SHA256 or RSA.\r\n+const header = {\r\n+    \"alg\": \"HS256\",\r\n+    \"typ\": \"JWT\"\r\n+}\r\n+const encodedHeaders = btoa(JSON.stringify(header))\r\n+\r\n+\r\n+// The second part of the token is the payload, which contains the claims.\r\n+// Claims are statements about an entity (typically, the user) and \r\n+// additional data. There are three types of claims: \r\n+// registered, public, and private claims.\r\n+const claims = {\r\n+    \"role\": \"admin\"\r\n+}\r\n+const encodedPlayload = btoa(JSON.stringify(claims))\r\n+\r\n+\r\n+// create the signature part you have to take the encoded header, \r\n+// the encoded payload, a secret, the algorithm specified in the header, \r\n+// and sign that.\r\n+const signature = HMACSHA256(`${encodedHeaders}.${encodedPlayload}`, \"mysecret\")\r\n+const encodedSignature = btoa(signature)\r\n+\r\n+const refresh_token = `${encodedHeaders}.${encodedPlayload}.${encodedSignature}`\r\n+console.log(refresh_token)\r\n+\r\n+function createRequest(service) {\r\n+    const instance = service.create();\r\n+\r\n+    instance.interceptors.response.use(\r\n+        function (response) {\r\n+            return response;\r\n+        },\r\n+        function (error) {\r\n+            if (error.response) {\r\n+                switch (error.response.status) {\r\n+                    case 401:\r\n+                        //重新授權\r\n+                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\") || {refresh_token};\r\n+                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token', { refreshToken });\r\n+                        Cookies.set('token', data.access_token);\r\n+                        Cookies.set('refresh_token', data.refresh_token);\r\n+                        console.log(error.message);\r\n+                        alert('未授權請重新登入或重新註冊')\r\n+                        break;\r\n+                    case 401:\r\n+                        alert('拒絕訪問')\r\n+                        break;\r\n+                    // case 404:\r\n+                    //     console.log(error.message);\r\n+                    //     alert('資料來源不存在')\r\n+                    //     break;\r\n+                    case 500:\r\n+                        console.log(error.message);\r\n+                        alert('內部系統發生錯誤')\r\n+                        break;\r\n+                    default:\r\n+                        console.log(error.message);\r\n+                }\r\n+            }\r\n+            if (!window.navigator.onLine) {\r\n+                alert(\"請重新連線後重整網頁\");\r\n+                return;\r\n+            }\r\n+            return Promise.reject(error);\r\n+        },\r\n+    );\r\n+\r\n+    return function(config) {\r\n+        const defaultConfig = {\r\n+            headers: {\r\n+                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n+                \"Content-Type\": \"application/json\"\r\n+            },\r\n+            timeout: 5000,\r\n+            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n+            data: {}\r\n+        };\r\n+        const mergeConfig = merge(defaultConfig, config);\r\n+        return instance(mergeConfig);\r\n+    };\r\n+}\r\n+\r\n+export const request = createRequest(axios);\r\n"
                },
                {
                    "date": 1692153102092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,93 @@\n+import axios from \"axios\";\r\n+import { merge } from \"lodash-es\"\r\n+import Cookies from 'js-cookie';\r\n+\r\n+const HMACSHA256 = (stringToSign, secret) => \"not_implemented\"\r\n+\r\n+// The header typically consists of two parts: \r\n+// the type of the token, which is JWT, and the signing algorithm being used, \r\n+// such as HMAC SHA256 or RSA.\r\n+const header = {\r\n+    \"alg\": \"HS256\",\r\n+    \"typ\": \"JWT\"\r\n+}\r\n+const encodedHeaders = btoa(JSON.stringify(header))\r\n+\r\n+\r\n+// The second part of the token is the payload, which contains the claims.\r\n+// Claims are statements about an entity (typically, the user) and \r\n+// additional data. There are three types of claims: \r\n+// registered, public, and private claims.\r\n+const claims = {\r\n+    \"role\": \"admin\"\r\n+}\r\n+const encodedPlayload = btoa(JSON.stringify(claims))\r\n+\r\n+\r\n+// create the signature part you have to take the encoded header, \r\n+// the encoded payload, a secret, the algorithm specified in the header, \r\n+// and sign that.\r\n+const signature = HMACSHA256(`${encodedHeaders}.${encodedPlayload}`, \"mysecret\")\r\n+const encodedSignature = btoa(signature)\r\n+\r\n+const refresh_token = `${encodedHeaders}.${encodedPlayload}.${encodedSignature}`\r\n+console.log(refresh_token)\r\n+\r\n+function createRequest(service) {\r\n+    const instance = service.create();\r\n+\r\n+    instance.interceptors.response.use(\r\n+        function (response) {\r\n+            return response;\r\n+        },\r\n+        function (error) {\r\n+            if (error.response) {\r\n+                switch (error.response.status) {\r\n+                    case 401:\r\n+                        //重新授權\r\n+                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\") || refresh_token;\r\n+                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token', { refreshToken });\r\n+                        Cookies.set('token', data.access_token);\r\n+                        Cookies.set('refresh_token', data.refresh_token);\r\n+                        console.log(error.message);\r\n+                        alert('未授權請重新登入或重新註冊')\r\n+                        break;\r\n+                    case 401:\r\n+                        alert('拒絕訪問')\r\n+                        break;\r\n+                    // case 404:\r\n+                    //     console.log(error.message);\r\n+                    //     alert('資料來源不存在')\r\n+                    //     break;\r\n+                    case 500:\r\n+                        console.log(error.message);\r\n+                        alert('內部系統發生錯誤')\r\n+                        break;\r\n+                    default:\r\n+                        console.log(error.message);\r\n+                }\r\n+            }\r\n+            if (!window.navigator.onLine) {\r\n+                alert(\"請重新連線後重整網頁\");\r\n+                return;\r\n+            }\r\n+            return Promise.reject(error);\r\n+        },\r\n+    );\r\n+\r\n+    return function(config) {\r\n+        const defaultConfig = {\r\n+            headers: {\r\n+                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n+                \"Content-Type\": \"application/json\"\r\n+            },\r\n+            timeout: 5000,\r\n+            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n+            data: {}\r\n+        };\r\n+        const mergeConfig = merge(defaultConfig, config);\r\n+        return instance(mergeConfig);\r\n+    };\r\n+}\r\n+\r\n+export const request = createRequest(axios);\r\n"
                },
                {
                    "date": 1692153112438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,93 @@\n+import axios from \"axios\";\r\n+import { merge } from \"lodash-es\"\r\n+import Cookies from 'js-cookie';\r\n+\r\n+const HMACSHA256 = (stringToSign, secret) => \"not_implemented\"\r\n+\r\n+// The header typically consists of two parts: \r\n+// the type of the token, which is JWT, and the signing algorithm being used, \r\n+// such as HMAC SHA256 or RSA.\r\n+const header = {\r\n+    \"alg\": \"HS256\",\r\n+    \"typ\": \"JWT\"\r\n+}\r\n+const encodedHeaders = btoa(JSON.stringify(header))\r\n+\r\n+\r\n+// The second part of the token is the payload, which contains the claims.\r\n+// Claims are statements about an entity (typically, the user) and \r\n+// additional data. There are three types of claims: \r\n+// registered, public, and private claims.\r\n+const claims = {\r\n+    \"role\": \"admin\"\r\n+}\r\n+const encodedPlayload = btoa(JSON.stringify(claims))\r\n+\r\n+\r\n+// create the signature part you have to take the encoded header, \r\n+// the encoded payload, a secret, the algorithm specified in the header, \r\n+// and sign that.\r\n+const signature = HMACSHA256(`${encodedHeaders}.${encodedPlayload}`, \"mysecret\")\r\n+const encodedSignature = btoa(signature)\r\n+\r\n+const refresh_token = `${encodedHeaders}.${encodedPlayload}.${encodedSignature}`\r\n+console.log(refresh_token)\r\n+\r\n+function createRequest(service) {\r\n+    const instance = service.create();\r\n+\r\n+    instance.interceptors.response.use(\r\n+        function (response) {\r\n+            return response;\r\n+        },\r\n+        function (error) {\r\n+            if (error.response) {\r\n+                switch (error.response.status) {\r\n+                    case 401:\r\n+                        //重新授權\r\n+                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\") || refresh_token;\r\n+                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token', refresh_token);\r\n+                        Cookies.set('token', data.access_token);\r\n+                        Cookies.set('refresh_token', data.refresh_token);\r\n+                        console.log(error.message);\r\n+                        alert('未授權請重新登入或重新註冊')\r\n+                        break;\r\n+                    case 401:\r\n+                        alert('拒絕訪問')\r\n+                        break;\r\n+                    // case 404:\r\n+                    //     console.log(error.message);\r\n+                    //     alert('資料來源不存在')\r\n+                    //     break;\r\n+                    case 500:\r\n+                        console.log(error.message);\r\n+                        alert('內部系統發生錯誤')\r\n+                        break;\r\n+                    default:\r\n+                        console.log(error.message);\r\n+                }\r\n+            }\r\n+            if (!window.navigator.onLine) {\r\n+                alert(\"請重新連線後重整網頁\");\r\n+                return;\r\n+            }\r\n+            return Promise.reject(error);\r\n+        },\r\n+    );\r\n+\r\n+    return function(config) {\r\n+        const defaultConfig = {\r\n+            headers: {\r\n+                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n+                \"Content-Type\": \"application/json\"\r\n+            },\r\n+            timeout: 5000,\r\n+            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n+            data: {}\r\n+        };\r\n+        const mergeConfig = merge(defaultConfig, config);\r\n+        return instance(mergeConfig);\r\n+    };\r\n+}\r\n+\r\n+export const request = createRequest(axios);\r\n"
                },
                {
                    "date": 1692153135681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,93 @@\n+import axios from \"axios\";\r\n+import { merge } from \"lodash-es\"\r\n+import Cookies from 'js-cookie';\r\n+\r\n+const HMACSHA256 = (stringToSign, secret) => \"not_implemented\"\r\n+\r\n+// The header typically consists of two parts: \r\n+// the type of the token, which is JWT, and the signing algorithm being used, \r\n+// such as HMAC SHA256 or RSA.\r\n+const header = {\r\n+    \"alg\": \"HS256\",\r\n+    \"typ\": \"JWT\"\r\n+}\r\n+const encodedHeaders = btoa(JSON.stringify(header))\r\n+\r\n+\r\n+// The second part of the token is the payload, which contains the claims.\r\n+// Claims are statements about an entity (typically, the user) and \r\n+// additional data. There are three types of claims: \r\n+// registered, public, and private claims.\r\n+const claims = {\r\n+    \"role\": \"admin\"\r\n+}\r\n+const encodedPlayload = btoa(JSON.stringify(claims))\r\n+\r\n+\r\n+// create the signature part you have to take the encoded header, \r\n+// the encoded payload, a secret, the algorithm specified in the header, \r\n+// and sign that.\r\n+const signature = HMACSHA256(`${encodedHeaders}.${encodedPlayload}`, \"mysecret\")\r\n+const encodedSignature = btoa(signature)\r\n+\r\n+const refresh_token = `${encodedHeaders}.${encodedPlayload}.${encodedSignature}`\r\n+console.log(refresh_token)\r\n+\r\n+function createRequest(service) {\r\n+    const instance = service.create();\r\n+\r\n+    instance.interceptors.response.use(\r\n+        function (response) {\r\n+            return response;\r\n+        },\r\n+        function (error) {\r\n+            if (error.response) {\r\n+                switch (error.response.status) {\r\n+                    case 401:\r\n+                        //重新授權\r\n+                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\") || refresh_token;\r\n+                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token',{ refresh_token : refresh_token});\r\n+                        Cookies.set('token', data.access_token);\r\n+                        Cookies.set('refresh_token', data.refresh_token);\r\n+                        console.log(error.message);\r\n+                        alert('未授權請重新登入或重新註冊')\r\n+                        break;\r\n+                    case 401:\r\n+                        alert('拒絕訪問')\r\n+                        break;\r\n+                    // case 404:\r\n+                    //     console.log(error.message);\r\n+                    //     alert('資料來源不存在')\r\n+                    //     break;\r\n+                    case 500:\r\n+                        console.log(error.message);\r\n+                        alert('內部系統發生錯誤')\r\n+                        break;\r\n+                    default:\r\n+                        console.log(error.message);\r\n+                }\r\n+            }\r\n+            if (!window.navigator.onLine) {\r\n+                alert(\"請重新連線後重整網頁\");\r\n+                return;\r\n+            }\r\n+            return Promise.reject(error);\r\n+        },\r\n+    );\r\n+\r\n+    return function(config) {\r\n+        const defaultConfig = {\r\n+            headers: {\r\n+                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n+                \"Content-Type\": \"application/json\"\r\n+            },\r\n+            timeout: 5000,\r\n+            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n+            data: {}\r\n+        };\r\n+        const mergeConfig = merge(defaultConfig, config);\r\n+        return instance(mergeConfig);\r\n+    };\r\n+}\r\n+\r\n+export const request = createRequest(axios);\r\n"
                },
                {
                    "date": 1692153190961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,93 @@\n+import axios from \"axios\";\r\n+import { merge } from \"lodash-es\"\r\n+import Cookies from 'js-cookie';\r\n+\r\n+const HMACSHA256 = (stringToSign, secret) => \"not_implemented\"\r\n+\r\n+// The header typically consists of two parts: \r\n+// the type of the token, which is JWT, and the signing algorithm being used, \r\n+// such as HMAC SHA256 or RSA.\r\n+const header = {\r\n+    \"alg\": \"HS256\",\r\n+    \"typ\": \"JWT\"\r\n+}\r\n+const encodedHeaders = btoa(JSON.stringify(header))\r\n+\r\n+\r\n+// The second part of the token is the payload, which contains the claims.\r\n+// Claims are statements about an entity (typically, the user) and \r\n+// additional data. There are three types of claims: \r\n+// registered, public, and private claims.\r\n+const claims = {\r\n+    \"role\": \"admin\"\r\n+}\r\n+const encodedPlayload = btoa(JSON.stringify(claims))\r\n+\r\n+\r\n+// create the signature part you have to take the encoded header, \r\n+// the encoded payload, a secret, the algorithm specified in the header, \r\n+// and sign that.\r\n+const signature = HMACSHA256(`${encodedHeaders}.${encodedPlayload}`, \"mysecret\")\r\n+const encodedSignature = btoa(signature)\r\n+\r\n+const refresh_token = `${encodedHeaders}.${encodedPlayload}.${encodedSignature}`\r\n+console.log(refresh_token)\r\n+\r\n+function createRequest(service) {\r\n+    const instance = service.create();\r\n+\r\n+    instance.interceptors.response.use(\r\n+        function (response) {\r\n+            return response;\r\n+        },\r\n+        function (error) {\r\n+            if (error.response) {\r\n+                switch (error.response.status) {\r\n+                    case 401:\r\n+                        //重新授權\r\n+                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\") || refresh_token;\r\n+                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token',{ refreshToken : refresh_token});\r\n+                        Cookies.set('token', data.access_token);\r\n+                        Cookies.set('refresh_token', data.refresh_token);\r\n+                        console.log(error.message);\r\n+                        alert('未授權請重新登入或重新註冊')\r\n+                        break;\r\n+                    case 401:\r\n+                        alert('拒絕訪問')\r\n+                        break;\r\n+                    // case 404:\r\n+                    //     console.log(error.message);\r\n+                    //     alert('資料來源不存在')\r\n+                    //     break;\r\n+                    case 500:\r\n+                        console.log(error.message);\r\n+                        alert('內部系統發生錯誤')\r\n+                        break;\r\n+                    default:\r\n+                        console.log(error.message);\r\n+                }\r\n+            }\r\n+            if (!window.navigator.onLine) {\r\n+                alert(\"請重新連線後重整網頁\");\r\n+                return;\r\n+            }\r\n+            return Promise.reject(error);\r\n+        },\r\n+    );\r\n+\r\n+    return function(config) {\r\n+        const defaultConfig = {\r\n+            headers: {\r\n+                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n+                \"Content-Type\": \"application/json\"\r\n+            },\r\n+            timeout: 5000,\r\n+            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n+            data: {}\r\n+        };\r\n+        const mergeConfig = merge(defaultConfig, config);\r\n+        return instance(mergeConfig);\r\n+    };\r\n+}\r\n+\r\n+export const request = createRequest(axios);\r\n"
                },
                {
                    "date": 1692154910894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,97 @@\n+import axios from \"axios\";\r\n+import { merge } from \"lodash-es\"\r\n+import Cookies from 'js-cookie';\r\n+\r\n+const HMACSHA256 = (stringToSign, secret) => \"not_implemented\"\r\n+\r\n+// The header typically consists of two parts: \r\n+// the type of the token, which is JWT, and the signing algorithm being used, \r\n+// such as HMAC SHA256 or RSA.\r\n+const header = {\r\n+    \"alg\": \"HS256\",\r\n+    \"typ\": \"JWT\"\r\n+}\r\n+const encodedHeaders = btoa(JSON.stringify(header))\r\n+\r\n+\r\n+// The second part of the token is the payload, which contains the claims.\r\n+// Claims are statements about an entity (typically, the user) and \r\n+// additional data. There are three types of claims: \r\n+// registered, public, and private claims.\r\n+const claims = {\r\n+    \"role\": \"admin\"\r\n+}\r\n+const encodedPlayload = btoa(JSON.stringify(claims))\r\n+\r\n+\r\n+// create the signature part you have to take the encoded header, \r\n+// the encoded payload, a secret, the algorithm specified in the header, \r\n+// and sign that.\r\n+const signature = HMACSHA256(`${encodedHeaders}.${encodedPlayload}`, \"mysecret\")\r\n+const encodedSignature = btoa(signature)\r\n+\r\n+const refresh_fake_token = `${encodedHeaders}.${encodedPlayload}.${encodedSignature}`\r\n+console.log(refresh_fake_token)\r\n+\r\n+function createRequest(service) {\r\n+    const instance = service.create();\r\n+\r\n+    instance.interceptors.response.use(\r\n+        function (response) {\r\n+            return response;\r\n+        },\r\n+        function (error) {\r\n+            if (error.response) {\r\n+                switch (error.response.status) {\r\n+                    case 401:\r\n+                        //重新授權\r\n+                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\") ;\r\n+                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token',{ refreshToken : refresh_token});\r\n+                        Cookies.set('token', data.access_token);\r\n+                        Cookies.set('refresh_token', data.refresh_token);\r\n+                        console.log(error.message);\r\n+                        alert('未授權請重新登入或重新註冊')\r\n+                        break;\r\n+                    case 401:\r\n+                        alert('拒絕訪問')\r\n+                        break;\r\n+                    // case 404:\r\n+                    //     console.log(error.message);\r\n+                    //     alert('資料來源不存在')\r\n+                    //     break;\r\n+                    case 500:\r\n+                        console.log(error.message);\r\n+                        alert('內部系統發生錯誤')\r\n+                        break;\r\n+                    default:\r\n+                        console.log(error.message);\r\n+                }\r\n+                if(typeof error.response.data !== 'object') {\r\n+                    alert('服务端异常！')\r\n+                    return Promise.reject(error)\r\n+                }\r\n+            }\r\n+            if (!window.navigator.onLine) {\r\n+                alert(\"請重新連線後重整網頁\");\r\n+                return;\r\n+            }\r\n+            return Promise.reject(error);\r\n+        },\r\n+    );\r\n+\r\n+    return function(config) {\r\n+        const defaultConfig = {\r\n+            headers: {\r\n+                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n+                \"Content-Type\": \"application/json\"\r\n+            },\r\n+            timeout: 5000,\r\n+            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n+            data: {}\r\n+        };\r\n+        const mergeConfig = merge(defaultConfig, config);\r\n+        return instance(mergeConfig);\r\n+    };\r\n+}\r\n+\r\n+export const request = createRequest(axios);\r\n"
                },
                {
                    "date": 1692155194945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,110 @@\n+import axios from \"axios\";\r\n+import { merge } from \"lodash-es\"\r\n+import Cookies from 'js-cookie';\r\n+import { setLocal } from '../common/js/utils'\r\n+const HMACSHA256 = (stringToSign, secret) => \"not_implemented\"\r\n+\r\n+// The header typically consists of two parts: \r\n+// the type of the token, which is JWT, and the signing algorithm being used, \r\n+// such as HMAC SHA256 or RSA.\r\n+const header = {\r\n+    \"alg\": \"HS256\",\r\n+    \"typ\": \"JWT\"\r\n+}\r\n+const encodedHeaders = btoa(JSON.stringify(header))\r\n+\r\n+\r\n+// The second part of the token is the payload, which contains the claims.\r\n+// Claims are statements about an entity (typically, the user) and \r\n+// additional data. There are three types of claims: \r\n+// registered, public, and private claims.\r\n+const claims = {\r\n+    \"role\": \"admin\"\r\n+}\r\n+const encodedPlayload = btoa(JSON.stringify(claims))\r\n+\r\n+\r\n+// create the signature part you have to take the encoded header, \r\n+// the encoded payload, a secret, the algorithm specified in the header, \r\n+// and sign that.\r\n+const signature = HMACSHA256(`${encodedHeaders}.${encodedPlayload}`, \"mysecret\")\r\n+const encodedSignature = btoa(signature)\r\n+\r\n+const refresh_fake_token = `${encodedHeaders}.${encodedPlayload}.${encodedSignature}`\r\n+console.log(refresh_fake_token)\r\n+\r\n+function createRequest(service) {\r\n+    const instance = service.create();\r\n+\r\n+    instance.interceptors.response.use(\r\n+        function (response) {\r\n+\r\n+            return response;\r\n+        },\r\n+        function (error) {\r\n+            if (error.response) {\r\n+                switch (error.response.status) {\r\n+                    case 401:\r\n+                        //重新授權\r\n+                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\") ;\r\n+                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token',{ refreshToken : refresh_token});\r\n+                        Cookies.set('token', data.access_token);\r\n+                        Cookies.set('refresh_token', data.refresh_token);\r\n+                        console.log(error.message);\r\n+                        alert('未授權請重新登入或重新註冊')\r\n+                        break;\r\n+                    case 401:\r\n+                        alert('拒絕訪問')\r\n+                        break;\r\n+                    // case 404:\r\n+                    //     console.log(error.message);\r\n+                    //     alert('資料來源不存在')\r\n+                    //     break;\r\n+                    case 500:\r\n+                        console.log(error.message);\r\n+                        alert('內部系統發生錯誤')\r\n+                        break;\r\n+                    default:\r\n+                        console.log(error.message);\r\n+                }\r\n+                if(typeof error.response.data !== 'object') {\r\n+                    alert('服务端异常！')\r\n+                    return Promise.reject(error)\r\n+                }\r\n+\r\n+                if (error.response.resultCode !== 200) {\r\n+                    if (error.response.message) alert(error.response.message)\r\n+                    if (error.response.resultCode == 416) {\r\n+                        router.push({ path: '/login' })\r\n+                    }\r\n+                    if (error.response.data && window.location.hash == '#/login') {\r\n+                        setLocal('token', error.response.data)\r\n+                        axios.defaults.headers['token'] = error.response.data\r\n+                    }\r\n+                    return Promise.reject(error.response)\r\n+                }\r\n+            }\r\n+            if (!window.navigator.onLine) {\r\n+                alert(\"請重新連線後重整網頁\");\r\n+                return;\r\n+            }\r\n+            return Promise.reject(error);\r\n+        },\r\n+    );\r\n+\r\n+    return function(config) {\r\n+        const defaultConfig = {\r\n+            headers: {\r\n+                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n+                \"Content-Type\": \"application/json\"\r\n+            },\r\n+            timeout: 5000,\r\n+            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n+            data: {}\r\n+        };\r\n+        const mergeConfig = merge(defaultConfig, config);\r\n+        return instance(mergeConfig);\r\n+    };\r\n+}\r\n+\r\n+export const request = createRequest(axios);\r\n"
                },
                {
                    "date": 1692580277434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,9 @@\n             return response;\r\n         },\r\n         function (error) {\r\n             if (error.response) {\r\n+                console.log('error.response.status', error.response.status)\r\n                 switch (error.response.status) {\r\n                     case 401:\r\n                         //重新授權\r\n                         const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\") ;\r\n@@ -107,845 +108,4 @@\n     };\r\n }\r\n \r\n export const request = createRequest(axios);\r\n-import axios from \"axios\";\r\n-import { merge } from \"lodash-es\"\r\n-import Cookies from 'js-cookie';\r\n-\r\n-const HMACSHA256 = (stringToSign, secret) => \"not_implemented\"\r\n-\r\n-// The header typically consists of two parts: \r\n-// the type of the token, which is JWT, and the signing algorithm being used, \r\n-// such as HMAC SHA256 or RSA.\r\n-const header = {\r\n-    \"alg\": \"HS256\",\r\n-    \"typ\": \"JWT\"\r\n-}\r\n-const encodedHeaders = btoa(JSON.stringify(header))\r\n-\r\n-\r\n-// The second part of the token is the payload, which contains the claims.\r\n-// Claims are statements about an entity (typically, the user) and \r\n-// additional data. There are three types of claims: \r\n-// registered, public, and private claims.\r\n-const claims = {\r\n-    \"role\": \"admin\"\r\n-}\r\n-const encodedPlayload = btoa(JSON.stringify(claims))\r\n-\r\n-\r\n-// create the signature part you have to take the encoded header, \r\n-// the encoded payload, a secret, the algorithm specified in the header, \r\n-// and sign that.\r\n-const signature = HMACSHA256(`${encodedHeaders}.${encodedPlayload}`, \"mysecret\")\r\n-const encodedSignature = btoa(signature)\r\n-\r\n-const refresh_fake_token = `${encodedHeaders}.${encodedPlayload}.${encodedSignature}`\r\n-console.log(refresh_fake_token)\r\n-\r\n-function createRequest(service) {\r\n-    const instance = service.create();\r\n-\r\n-    instance.interceptors.response.use(\r\n-        function (response) {\r\n-            return response;\r\n-        },\r\n-        function (error) {\r\n-            if (error.response) {\r\n-                switch (error.response.status) {\r\n-                    case 401:\r\n-                        //重新授權\r\n-                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\") ;\r\n-                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token',{ refreshToken : refresh_token});\r\n-                        Cookies.set('token', data.access_token);\r\n-                        Cookies.set('refresh_token', data.refresh_token);\r\n-                        console.log(error.message);\r\n-                        alert('未授權請重新登入或重新註冊')\r\n-                        break;\r\n-                    case 401:\r\n-                        alert('拒絕訪問')\r\n-                        break;\r\n-                    // case 404:\r\n-                    //     console.log(error.message);\r\n-                    //     alert('資料來源不存在')\r\n-                    //     break;\r\n-                    case 500:\r\n-                        console.log(error.message);\r\n-                        alert('內部系統發生錯誤')\r\n-                        break;\r\n-                    default:\r\n-                        console.log(error.message);\r\n-                }\r\n-                if(typeof error.response.data !== 'object') {\r\n-                    alert('服务端异常！')\r\n-                    return Promise.reject(error)\r\n-                }\r\n-            }\r\n-            if (!window.navigator.onLine) {\r\n-                alert(\"請重新連線後重整網頁\");\r\n-                return;\r\n-            }\r\n-            return Promise.reject(error);\r\n-        },\r\n-    );\r\n-\r\n-    return function(config) {\r\n-        const defaultConfig = {\r\n-            headers: {\r\n-                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n-                \"Content-Type\": \"application/json\"\r\n-            },\r\n-            timeout: 5000,\r\n-            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n-            data: {}\r\n-        };\r\n-        const mergeConfig = merge(defaultConfig, config);\r\n-        return instance(mergeConfig);\r\n-    };\r\n-}\r\n-\r\n-export const request = createRequest(axios);\r\n-import axios from \"axios\";\r\n-import { merge } from \"lodash-es\"\r\n-import Cookies from 'js-cookie';\r\n-\r\n-const HMACSHA256 = (stringToSign, secret) => \"not_implemented\"\r\n-\r\n-// The header typically consists of two parts: \r\n-// the type of the token, which is JWT, and the signing algorithm being used, \r\n-// such as HMAC SHA256 or RSA.\r\n-const header = {\r\n-    \"alg\": \"HS256\",\r\n-    \"typ\": \"JWT\"\r\n-}\r\n-const encodedHeaders = btoa(JSON.stringify(header))\r\n-\r\n-\r\n-// The second part of the token is the payload, which contains the claims.\r\n-// Claims are statements about an entity (typically, the user) and \r\n-// additional data. There are three types of claims: \r\n-// registered, public, and private claims.\r\n-const claims = {\r\n-    \"role\": \"admin\"\r\n-}\r\n-const encodedPlayload = btoa(JSON.stringify(claims))\r\n-\r\n-\r\n-// create the signature part you have to take the encoded header, \r\n-// the encoded payload, a secret, the algorithm specified in the header, \r\n-// and sign that.\r\n-const signature = HMACSHA256(`${encodedHeaders}.${encodedPlayload}`, \"mysecret\")\r\n-const encodedSignature = btoa(signature)\r\n-\r\n-const refresh_token = `${encodedHeaders}.${encodedPlayload}.${encodedSignature}`\r\n-console.log(refresh_token)\r\n-\r\n-function createRequest(service) {\r\n-    const instance = service.create();\r\n-\r\n-    instance.interceptors.response.use(\r\n-        function (response) {\r\n-            return response;\r\n-        },\r\n-        function (error) {\r\n-            if (error.response) {\r\n-                switch (error.response.status) {\r\n-                    case 401:\r\n-                        //重新授權\r\n-                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\") || refresh_token;\r\n-                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token',{ refreshToken : refresh_token});\r\n-                        Cookies.set('token', data.access_token);\r\n-                        Cookies.set('refresh_token', data.refresh_token);\r\n-                        console.log(error.message);\r\n-                        alert('未授權請重新登入或重新註冊')\r\n-                        break;\r\n-                    case 401:\r\n-                        alert('拒絕訪問')\r\n-                        break;\r\n-                    // case 404:\r\n-                    //     console.log(error.message);\r\n-                    //     alert('資料來源不存在')\r\n-                    //     break;\r\n-                    case 500:\r\n-                        console.log(error.message);\r\n-                        alert('內部系統發生錯誤')\r\n-                        break;\r\n-                    default:\r\n-                        console.log(error.message);\r\n-                }\r\n-            }\r\n-            if (!window.navigator.onLine) {\r\n-                alert(\"請重新連線後重整網頁\");\r\n-                return;\r\n-            }\r\n-            return Promise.reject(error);\r\n-        },\r\n-    );\r\n-\r\n-    return function(config) {\r\n-        const defaultConfig = {\r\n-            headers: {\r\n-                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n-                \"Content-Type\": \"application/json\"\r\n-            },\r\n-            timeout: 5000,\r\n-            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n-            data: {}\r\n-        };\r\n-        const mergeConfig = merge(defaultConfig, config);\r\n-        return instance(mergeConfig);\r\n-    };\r\n-}\r\n-\r\n-export const request = createRequest(axios);\r\n-import axios from \"axios\";\r\n-import { merge } from \"lodash-es\"\r\n-import Cookies from 'js-cookie';\r\n-\r\n-const HMACSHA256 = (stringToSign, secret) => \"not_implemented\"\r\n-\r\n-// The header typically consists of two parts: \r\n-// the type of the token, which is JWT, and the signing algorithm being used, \r\n-// such as HMAC SHA256 or RSA.\r\n-const header = {\r\n-    \"alg\": \"HS256\",\r\n-    \"typ\": \"JWT\"\r\n-}\r\n-const encodedHeaders = btoa(JSON.stringify(header))\r\n-\r\n-\r\n-// The second part of the token is the payload, which contains the claims.\r\n-// Claims are statements about an entity (typically, the user) and \r\n-// additional data. There are three types of claims: \r\n-// registered, public, and private claims.\r\n-const claims = {\r\n-    \"role\": \"admin\"\r\n-}\r\n-const encodedPlayload = btoa(JSON.stringify(claims))\r\n-\r\n-\r\n-// create the signature part you have to take the encoded header, \r\n-// the encoded payload, a secret, the algorithm specified in the header, \r\n-// and sign that.\r\n-const signature = HMACSHA256(`${encodedHeaders}.${encodedPlayload}`, \"mysecret\")\r\n-const encodedSignature = btoa(signature)\r\n-\r\n-const refresh_token = `${encodedHeaders}.${encodedPlayload}.${encodedSignature}`\r\n-console.log(refresh_token)\r\n-\r\n-function createRequest(service) {\r\n-    const instance = service.create();\r\n-\r\n-    instance.interceptors.response.use(\r\n-        function (response) {\r\n-            return response;\r\n-        },\r\n-        function (error) {\r\n-            if (error.response) {\r\n-                switch (error.response.status) {\r\n-                    case 401:\r\n-                        //重新授權\r\n-                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\") || refresh_token;\r\n-                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token',{ refresh_token : refresh_token});\r\n-                        Cookies.set('token', data.access_token);\r\n-                        Cookies.set('refresh_token', data.refresh_token);\r\n-                        console.log(error.message);\r\n-                        alert('未授權請重新登入或重新註冊')\r\n-                        break;\r\n-                    case 401:\r\n-                        alert('拒絕訪問')\r\n-                        break;\r\n-                    // case 404:\r\n-                    //     console.log(error.message);\r\n-                    //     alert('資料來源不存在')\r\n-                    //     break;\r\n-                    case 500:\r\n-                        console.log(error.message);\r\n-                        alert('內部系統發生錯誤')\r\n-                        break;\r\n-                    default:\r\n-                        console.log(error.message);\r\n-                }\r\n-            }\r\n-            if (!window.navigator.onLine) {\r\n-                alert(\"請重新連線後重整網頁\");\r\n-                return;\r\n-            }\r\n-            return Promise.reject(error);\r\n-        },\r\n-    );\r\n-\r\n-    return function(config) {\r\n-        const defaultConfig = {\r\n-            headers: {\r\n-                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n-                \"Content-Type\": \"application/json\"\r\n-            },\r\n-            timeout: 5000,\r\n-            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n-            data: {}\r\n-        };\r\n-        const mergeConfig = merge(defaultConfig, config);\r\n-        return instance(mergeConfig);\r\n-    };\r\n-}\r\n-\r\n-export const request = createRequest(axios);\r\n-import axios from \"axios\";\r\n-import { merge } from \"lodash-es\"\r\n-import Cookies from 'js-cookie';\r\n-\r\n-const HMACSHA256 = (stringToSign, secret) => \"not_implemented\"\r\n-\r\n-// The header typically consists of two parts: \r\n-// the type of the token, which is JWT, and the signing algorithm being used, \r\n-// such as HMAC SHA256 or RSA.\r\n-const header = {\r\n-    \"alg\": \"HS256\",\r\n-    \"typ\": \"JWT\"\r\n-}\r\n-const encodedHeaders = btoa(JSON.stringify(header))\r\n-\r\n-\r\n-// The second part of the token is the payload, which contains the claims.\r\n-// Claims are statements about an entity (typically, the user) and \r\n-// additional data. There are three types of claims: \r\n-// registered, public, and private claims.\r\n-const claims = {\r\n-    \"role\": \"admin\"\r\n-}\r\n-const encodedPlayload = btoa(JSON.stringify(claims))\r\n-\r\n-\r\n-// create the signature part you have to take the encoded header, \r\n-// the encoded payload, a secret, the algorithm specified in the header, \r\n-// and sign that.\r\n-const signature = HMACSHA256(`${encodedHeaders}.${encodedPlayload}`, \"mysecret\")\r\n-const encodedSignature = btoa(signature)\r\n-\r\n-const refresh_token = `${encodedHeaders}.${encodedPlayload}.${encodedSignature}`\r\n-console.log(refresh_token)\r\n-\r\n-function createRequest(service) {\r\n-    const instance = service.create();\r\n-\r\n-    instance.interceptors.response.use(\r\n-        function (response) {\r\n-            return response;\r\n-        },\r\n-        function (error) {\r\n-            if (error.response) {\r\n-                switch (error.response.status) {\r\n-                    case 401:\r\n-                        //重新授權\r\n-                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\") || refresh_token;\r\n-                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token', refresh_token);\r\n-                        Cookies.set('token', data.access_token);\r\n-                        Cookies.set('refresh_token', data.refresh_token);\r\n-                        console.log(error.message);\r\n-                        alert('未授權請重新登入或重新註冊')\r\n-                        break;\r\n-                    case 401:\r\n-                        alert('拒絕訪問')\r\n-                        break;\r\n-                    // case 404:\r\n-                    //     console.log(error.message);\r\n-                    //     alert('資料來源不存在')\r\n-                    //     break;\r\n-                    case 500:\r\n-                        console.log(error.message);\r\n-                        alert('內部系統發生錯誤')\r\n-                        break;\r\n-                    default:\r\n-                        console.log(error.message);\r\n-                }\r\n-            }\r\n-            if (!window.navigator.onLine) {\r\n-                alert(\"請重新連線後重整網頁\");\r\n-                return;\r\n-            }\r\n-            return Promise.reject(error);\r\n-        },\r\n-    );\r\n-\r\n-    return function(config) {\r\n-        const defaultConfig = {\r\n-            headers: {\r\n-                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n-                \"Content-Type\": \"application/json\"\r\n-            },\r\n-            timeout: 5000,\r\n-            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n-            data: {}\r\n-        };\r\n-        const mergeConfig = merge(defaultConfig, config);\r\n-        return instance(mergeConfig);\r\n-    };\r\n-}\r\n-\r\n-export const request = createRequest(axios);\r\n-import axios from \"axios\";\r\n-import { merge } from \"lodash-es\"\r\n-import Cookies from 'js-cookie';\r\n-\r\n-const HMACSHA256 = (stringToSign, secret) => \"not_implemented\"\r\n-\r\n-// The header typically consists of two parts: \r\n-// the type of the token, which is JWT, and the signing algorithm being used, \r\n-// such as HMAC SHA256 or RSA.\r\n-const header = {\r\n-    \"alg\": \"HS256\",\r\n-    \"typ\": \"JWT\"\r\n-}\r\n-const encodedHeaders = btoa(JSON.stringify(header))\r\n-\r\n-\r\n-// The second part of the token is the payload, which contains the claims.\r\n-// Claims are statements about an entity (typically, the user) and \r\n-// additional data. There are three types of claims: \r\n-// registered, public, and private claims.\r\n-const claims = {\r\n-    \"role\": \"admin\"\r\n-}\r\n-const encodedPlayload = btoa(JSON.stringify(claims))\r\n-\r\n-\r\n-// create the signature part you have to take the encoded header, \r\n-// the encoded payload, a secret, the algorithm specified in the header, \r\n-// and sign that.\r\n-const signature = HMACSHA256(`${encodedHeaders}.${encodedPlayload}`, \"mysecret\")\r\n-const encodedSignature = btoa(signature)\r\n-\r\n-const refresh_token = `${encodedHeaders}.${encodedPlayload}.${encodedSignature}`\r\n-console.log(refresh_token)\r\n-\r\n-function createRequest(service) {\r\n-    const instance = service.create();\r\n-\r\n-    instance.interceptors.response.use(\r\n-        function (response) {\r\n-            return response;\r\n-        },\r\n-        function (error) {\r\n-            if (error.response) {\r\n-                switch (error.response.status) {\r\n-                    case 401:\r\n-                        //重新授權\r\n-                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\") || refresh_token;\r\n-                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token', { refreshToken });\r\n-                        Cookies.set('token', data.access_token);\r\n-                        Cookies.set('refresh_token', data.refresh_token);\r\n-                        console.log(error.message);\r\n-                        alert('未授權請重新登入或重新註冊')\r\n-                        break;\r\n-                    case 401:\r\n-                        alert('拒絕訪問')\r\n-                        break;\r\n-                    // case 404:\r\n-                    //     console.log(error.message);\r\n-                    //     alert('資料來源不存在')\r\n-                    //     break;\r\n-                    case 500:\r\n-                        console.log(error.message);\r\n-                        alert('內部系統發生錯誤')\r\n-                        break;\r\n-                    default:\r\n-                        console.log(error.message);\r\n-                }\r\n-            }\r\n-            if (!window.navigator.onLine) {\r\n-                alert(\"請重新連線後重整網頁\");\r\n-                return;\r\n-            }\r\n-            return Promise.reject(error);\r\n-        },\r\n-    );\r\n-\r\n-    return function(config) {\r\n-        const defaultConfig = {\r\n-            headers: {\r\n-                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n-                \"Content-Type\": \"application/json\"\r\n-            },\r\n-            timeout: 5000,\r\n-            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n-            data: {}\r\n-        };\r\n-        const mergeConfig = merge(defaultConfig, config);\r\n-        return instance(mergeConfig);\r\n-    };\r\n-}\r\n-\r\n-export const request = createRequest(axios);\r\n-import axios from \"axios\";\r\n-import { merge } from \"lodash-es\"\r\n-import Cookies from 'js-cookie';\r\n-\r\n-const HMACSHA256 = (stringToSign, secret) => \"not_implemented\"\r\n-\r\n-// The header typically consists of two parts: \r\n-// the type of the token, which is JWT, and the signing algorithm being used, \r\n-// such as HMAC SHA256 or RSA.\r\n-const header = {\r\n-    \"alg\": \"HS256\",\r\n-    \"typ\": \"JWT\"\r\n-}\r\n-const encodedHeaders = btoa(JSON.stringify(header))\r\n-\r\n-\r\n-// The second part of the token is the payload, which contains the claims.\r\n-// Claims are statements about an entity (typically, the user) and \r\n-// additional data. There are three types of claims: \r\n-// registered, public, and private claims.\r\n-const claims = {\r\n-    \"role\": \"admin\"\r\n-}\r\n-const encodedPlayload = btoa(JSON.stringify(claims))\r\n-\r\n-\r\n-// create the signature part you have to take the encoded header, \r\n-// the encoded payload, a secret, the algorithm specified in the header, \r\n-// and sign that.\r\n-const signature = HMACSHA256(`${encodedHeaders}.${encodedPlayload}`, \"mysecret\")\r\n-const encodedSignature = btoa(signature)\r\n-\r\n-const refresh_token = `${encodedHeaders}.${encodedPlayload}.${encodedSignature}`\r\n-console.log(refresh_token)\r\n-\r\n-function createRequest(service) {\r\n-    const instance = service.create();\r\n-\r\n-    instance.interceptors.response.use(\r\n-        function (response) {\r\n-            return response;\r\n-        },\r\n-        function (error) {\r\n-            if (error.response) {\r\n-                switch (error.response.status) {\r\n-                    case 401:\r\n-                        //重新授權\r\n-                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\") || {refresh_token};\r\n-                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token', { refreshToken });\r\n-                        Cookies.set('token', data.access_token);\r\n-                        Cookies.set('refresh_token', data.refresh_token);\r\n-                        console.log(error.message);\r\n-                        alert('未授權請重新登入或重新註冊')\r\n-                        break;\r\n-                    case 401:\r\n-                        alert('拒絕訪問')\r\n-                        break;\r\n-                    // case 404:\r\n-                    //     console.log(error.message);\r\n-                    //     alert('資料來源不存在')\r\n-                    //     break;\r\n-                    case 500:\r\n-                        console.log(error.message);\r\n-                        alert('內部系統發生錯誤')\r\n-                        break;\r\n-                    default:\r\n-                        console.log(error.message);\r\n-                }\r\n-            }\r\n-            if (!window.navigator.onLine) {\r\n-                alert(\"請重新連線後重整網頁\");\r\n-                return;\r\n-            }\r\n-            return Promise.reject(error);\r\n-        },\r\n-    );\r\n-\r\n-    return function(config) {\r\n-        const defaultConfig = {\r\n-            headers: {\r\n-                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n-                \"Content-Type\": \"application/json\"\r\n-            },\r\n-            timeout: 5000,\r\n-            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n-            data: {}\r\n-        };\r\n-        const mergeConfig = merge(defaultConfig, config);\r\n-        return instance(mergeConfig);\r\n-    };\r\n-}\r\n-\r\n-export const request = createRequest(axios);\r\n-import axios from \"axios\";\r\n-import { merge } from \"lodash-es\"\r\n-import Cookies from 'js-cookie';\r\n-\r\n-const HMACSHA256 = (stringToSign, secret) => \"not_implemented\"\r\n-\r\n-// The header typically consists of two parts: \r\n-// the type of the token, which is JWT, and the signing algorithm being used, \r\n-// such as HMAC SHA256 or RSA.\r\n-const header = {\r\n-    \"alg\": \"HS256\",\r\n-    \"typ\": \"JWT\"\r\n-}\r\n-const encodedHeaders = btoa(JSON.stringify(header))\r\n-\r\n-\r\n-// The second part of the token is the payload, which contains the claims.\r\n-// Claims are statements about an entity (typically, the user) and \r\n-// additional data. There are three types of claims: \r\n-// registered, public, and private claims.\r\n-const claims = {\r\n-    \"role\": \"admin\"\r\n-}\r\n-const encodedPlayload = btoa(JSON.stringify(claims))\r\n-\r\n-\r\n-// create the signature part you have to take the encoded header, \r\n-// the encoded payload, a secret, the algorithm specified in the header, \r\n-// and sign that.\r\n-const signature = HMACSHA256(`${encodedHeaders}.${encodedPlayload}`, \"mysecret\")\r\n-const encodedSignature = btoa(signature)\r\n-\r\n-const refresh_token = `${encodedHeaders}.${encodedPlayload}.${encodedSignature}`\r\n-console.log({refresh_token})\r\n-\r\n-function createRequest(service) {\r\n-    const instance = service.create();\r\n-\r\n-    instance.interceptors.response.use(\r\n-        function (response) {\r\n-            return response;\r\n-        },\r\n-        function (error) {\r\n-            if (error.response) {\r\n-                switch (error.response.status) {\r\n-                    case 401:\r\n-                        //重新授權\r\n-                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\") || {refresh_token};\r\n-                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token', { refreshToken });\r\n-                        Cookies.set('token', data.access_token);\r\n-                        Cookies.set('refresh_token', data.refresh_token);\r\n-                        console.log(error.message);\r\n-                        alert('未授權請重新登入或重新註冊')\r\n-                        break;\r\n-                    case 401:\r\n-                        alert('拒絕訪問')\r\n-                        break;\r\n-                    // case 404:\r\n-                    //     console.log(error.message);\r\n-                    //     alert('資料來源不存在')\r\n-                    //     break;\r\n-                    case 500:\r\n-                        console.log(error.message);\r\n-                        alert('內部系統發生錯誤')\r\n-                        break;\r\n-                    default:\r\n-                        console.log(error.message);\r\n-                }\r\n-            }\r\n-            if (!window.navigator.onLine) {\r\n-                alert(\"請重新連線後重整網頁\");\r\n-                return;\r\n-            }\r\n-            return Promise.reject(error);\r\n-        },\r\n-    );\r\n-\r\n-    return function(config) {\r\n-        const defaultConfig = {\r\n-            headers: {\r\n-                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n-                \"Content-Type\": \"application/json\"\r\n-            },\r\n-            timeout: 5000,\r\n-            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n-            data: {}\r\n-        };\r\n-        const mergeConfig = merge(defaultConfig, config);\r\n-        return instance(mergeConfig);\r\n-    };\r\n-}\r\n-\r\n-export const request = createRequest(axios);\r\n-import axios from \"axios\";\r\n-import { merge } from \"lodash-es\"\r\n-import Cookies from 'js-cookie';\r\n-\r\n-const HMACSHA256 = (stringToSign, secret) => \"not_implemented\"\r\n-\r\n-// The header typically consists of two parts: \r\n-// the type of the token, which is JWT, and the signing algorithm being used, \r\n-// such as HMAC SHA256 or RSA.\r\n-const header = {\r\n-    \"alg\": \"HS256\",\r\n-    \"typ\": \"JWT\"\r\n-}\r\n-const encodedHeaders = btoa(JSON.stringify(header))\r\n-\r\n-\r\n-// The second part of the token is the payload, which contains the claims.\r\n-// Claims are statements about an entity (typically, the user) and \r\n-// additional data. There are three types of claims: \r\n-// registered, public, and private claims.\r\n-const claims = {\r\n-    \"role\": \"admin\"\r\n-}\r\n-const encodedPlayload = btoa(JSON.stringify(claims))\r\n-\r\n-\r\n-// create the signature part you have to take the encoded header, \r\n-// the encoded payload, a secret, the algorithm specified in the header, \r\n-// and sign that.\r\n-const signature = HMACSHA256(`${encodedHeaders}.${encodedPlayload}`, \"mysecret\")\r\n-const encodedSignature = btoa(signature)\r\n-\r\n-const jwt = `${encodedHeaders}.${encodedPlayload}.${encodedSignature}`\r\n-console.log({jwt})\r\n-\r\n-function createRequest(service) {\r\n-    const instance = service.create();\r\n-\r\n-    instance.interceptors.response.use(\r\n-        function (response) {\r\n-            return response;\r\n-        },\r\n-        function (error) {\r\n-            if (error.response) {\r\n-                switch (error.response.status) {\r\n-                    case 401:\r\n-                        //重新授權\r\n-                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\") || generate_token(32);\r\n-                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token', { refreshToken });\r\n-                        Cookies.set('token', data.access_token);\r\n-                        Cookies.set('refresh_token', data.refresh_token);\r\n-                        console.log(error.message);\r\n-                        alert('未授權請重新登入或重新註冊')\r\n-                        break;\r\n-                    case 401:\r\n-                        alert('拒絕訪問')\r\n-                        break;\r\n-                    // case 404:\r\n-                    //     console.log(error.message);\r\n-                    //     alert('資料來源不存在')\r\n-                    //     break;\r\n-                    case 500:\r\n-                        console.log(error.message);\r\n-                        alert('內部系統發生錯誤')\r\n-                        break;\r\n-                    default:\r\n-                        console.log(error.message);\r\n-                }\r\n-            }\r\n-            if (!window.navigator.onLine) {\r\n-                alert(\"請重新連線後重整網頁\");\r\n-                return;\r\n-            }\r\n-            return Promise.reject(error);\r\n-        },\r\n-    );\r\n-\r\n-    return function(config) {\r\n-        const defaultConfig = {\r\n-            headers: {\r\n-                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n-                \"Content-Type\": \"application/json\"\r\n-            },\r\n-            timeout: 5000,\r\n-            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n-            data: {}\r\n-        };\r\n-        const mergeConfig = merge(defaultConfig, config);\r\n-        return instance(mergeConfig);\r\n-    };\r\n-}\r\n-\r\n-export const request = createRequest(axios);\r\n-import axios from \"axios\";\r\n-import { merge } from \"lodash-es\"\r\n-import Cookies from 'js-cookie';\r\n-\r\n-const HMACSHA256 = (stringToSign, secret) => \"not_implemented\"\r\n-\r\n-// The header typically consists of two parts: \r\n-// the type of the token, which is JWT, and the signing algorithm being used, \r\n-// such as HMAC SHA256 or RSA.\r\n-const header = {\r\n-    \"alg\": \"HS256\",\r\n-    \"typ\": \"JWT\"\r\n-}\r\n-const encodedHeaders = btoa(JSON.stringify(header))\r\n-\r\n-\r\n-// The second part of the token is the payload, which contains the claims.\r\n-// Claims are statements about an entity (typically, the user) and \r\n-// additional data. There are three types of claims: \r\n-// registered, public, and private claims.\r\n-const claims = {\r\n-    \"role\": \"admin\"\r\n-}\r\n-const encodedPlayload = btoa(JSON.stringify(claims))\r\n-\r\n-\r\n-// create the signature part you have to take the encoded header, \r\n-// the encoded payload, a secret, the algorithm specified in the header, \r\n-// and sign that.\r\n-const signature = HMACSHA256(`${encodedHeaders}.${encodedPlayload}`, \"mysecret\")\r\n-const encodedSignature = btoa(signature)\r\n-\r\n-const jwt = `${encodedHeaders}.${encodedPlayload}.${encodedSignature}`\r\n-console.log({refresh_token})\r\n-\r\n-function createRequest(service) {\r\n-    const instance = service.create();\r\n-\r\n-    instance.interceptors.response.use(\r\n-        function (response) {\r\n-            return response;\r\n-        },\r\n-        function (error) {\r\n-            if (error.response) {\r\n-                switch (error.response.status) {\r\n-                    case 401:\r\n-                        //重新授權\r\n-                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\") || generate_token(32);\r\n-                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token', { refreshToken });\r\n-                        Cookies.set('token', data.access_token);\r\n-                        Cookies.set('refresh_token', data.refresh_token);\r\n-                        console.log(error.message);\r\n-                        alert('未授權請重新登入或重新註冊')\r\n-                        break;\r\n-                    case 401:\r\n-                        alert('拒絕訪問')\r\n-                        break;\r\n-                    // case 404:\r\n-                    //     console.log(error.message);\r\n-                    //     alert('資料來源不存在')\r\n-                    //     break;\r\n-                    case 500:\r\n-                        console.log(error.message);\r\n-                        alert('內部系統發生錯誤')\r\n-                        break;\r\n-                    default:\r\n-                        console.log(error.message);\r\n-                }\r\n-            }\r\n-            if (!window.navigator.onLine) {\r\n-                alert(\"請重新連線後重整網頁\");\r\n-                return;\r\n-            }\r\n-            return Promise.reject(error);\r\n-        },\r\n-    );\r\n-\r\n-    return function(config) {\r\n-        const defaultConfig = {\r\n-            headers: {\r\n-                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n-                \"Content-Type\": \"application/json\"\r\n-            },\r\n-            timeout: 5000,\r\n-            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n-            data: {}\r\n-        };\r\n-        const mergeConfig = merge(defaultConfig, config);\r\n-        return instance(mergeConfig);\r\n-    };\r\n-}\r\n-\r\n-export const request = createRequest(axios);\r\n"
                },
                {
                    "date": 1692580333233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,111 @@\n+import axios from \"axios\";\r\n+import { merge } from \"lodash-es\"\r\n+import Cookies from 'js-cookie';\r\n+import { setLocal } from '../common/js/utils'\r\n+const HMACSHA256 = (stringToSign, secret) => \"not_implemented\"\r\n+\r\n+// The header typically consists of two parts: \r\n+// the type of the token, which is JWT, and the signing algorithm being used, \r\n+// such as HMAC SHA256 or RSA.\r\n+const header = {\r\n+    \"alg\": \"HS256\",\r\n+    \"typ\": \"JWT\"\r\n+}\r\n+const encodedHeaders = btoa(JSON.stringify(header))\r\n+\r\n+\r\n+// The second part of the token is the payload, which contains the claims.\r\n+// Claims are statements about an entity (typically, the user) and \r\n+// additional data. There are three types of claims: \r\n+// registered, public, and private claims.\r\n+const claims = {\r\n+    \"role\": \"admin\"\r\n+}\r\n+const encodedPlayload = btoa(JSON.stringify(claims))\r\n+\r\n+\r\n+// create the signature part you have to take the encoded header, \r\n+// the encoded payload, a secret, the algorithm specified in the header, \r\n+// and sign that.\r\n+const signature = HMACSHA256(`${encodedHeaders}.${encodedPlayload}`, \"mysecret\")\r\n+const encodedSignature = btoa(signature)\r\n+\r\n+const refresh_fake_token = `${encodedHeaders}.${encodedPlayload}.${encodedSignature}`\r\n+console.log(refresh_fake_token)\r\n+\r\n+function createRequest(service) {\r\n+    const instance = service.create();\r\n+\r\n+    instance.interceptors.response.use(\r\n+        function (response) {\r\n+\r\n+            return response;\r\n+        },\r\n+        function (error) {\r\n+            if (error.response) {\r\n+                console.log('error.response.status', error.response.status)\r\n+                switch (error.response.status) {\r\n+                    case 401:\r\n+                        //重新授權\r\n+                        // const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\") ;\r\n+                        // const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token',{ refreshToken : refresh_token});\r\n+                        // Cookies.set('token', data.access_token);\r\n+                        // Cookies.set('refresh_token', data.refresh_token);\r\n+                        console.log(error.message);\r\n+                        alert('未授權請重新登入或重新註冊')\r\n+                        break;\r\n+                    case 401:\r\n+                        alert('拒絕訪問')\r\n+                        break;\r\n+                    // case 404:\r\n+                    //     console.log(error.message);\r\n+                    //     alert('資料來源不存在')\r\n+                    //     break;\r\n+                    case 500:\r\n+                        console.log(error.message);\r\n+                        alert('內部系統發生錯誤')\r\n+                        break;\r\n+                    default:\r\n+                        console.log(error.message);\r\n+                }\r\n+                if(typeof error.response.data !== 'object') {\r\n+                    alert('服务端异常！')\r\n+                    return Promise.reject(error)\r\n+                }\r\n+\r\n+                if (error.response.resultCode !== 200) {\r\n+                    if (error.response.message) alert(error.response.message)\r\n+                    if (error.response.resultCode == 416) {\r\n+                        router.push({ path: '/login' })\r\n+                    }\r\n+                    if (error.response.data && window.location.hash == '#/login') {\r\n+                        setLocal('token', error.response.data)\r\n+                        axios.defaults.headers['token'] = error.response.data\r\n+                    }\r\n+                    return Promise.reject(error.response)\r\n+                }\r\n+            }\r\n+            if (!window.navigator.onLine) {\r\n+                alert(\"請重新連線後重整網頁\");\r\n+                return;\r\n+            }\r\n+            return Promise.reject(error);\r\n+        },\r\n+    );\r\n+\r\n+    return function(config) {\r\n+        const defaultConfig = {\r\n+            headers: {\r\n+                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n+                \"Content-Type\": \"application/json\"\r\n+            },\r\n+            timeout: 5000,\r\n+            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n+            data: {}\r\n+        };\r\n+        const mergeConfig = merge(defaultConfig, config);\r\n+        return instance(mergeConfig);\r\n+    };\r\n+}\r\n+\r\n+export const request = createRequest(axios);\r\n"
                },
                {
                    "date": 1692580355534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,108 @@\n+import axios from \"axios\";\r\n+import { merge } from \"lodash-es\"\r\n+import Cookies from 'js-cookie';\r\n+import { setLocal } from '../common/js/utils'\r\n+const HMACSHA256 = (stringToSign, secret) => \"not_implemented\"\r\n+\r\n+// The header typically consists of two parts: \r\n+// the type of the token, which is JWT, and the signing algorithm being used, \r\n+// such as HMAC SHA256 or RSA.\r\n+const header = {\r\n+    \"alg\": \"HS256\",\r\n+    \"typ\": \"JWT\"\r\n+}\r\n+const encodedHeaders = btoa(JSON.stringify(header))\r\n+\r\n+\r\n+// The second part of the token is the payload, which contains the claims.\r\n+// Claims are statements about an entity (typically, the user) and \r\n+// additional data. There are three types of claims: \r\n+// registered, public, and private claims.\r\n+const claims = {\r\n+    \"role\": \"admin\"\r\n+}\r\n+const encodedPlayload = btoa(JSON.stringify(claims))\r\n+\r\n+\r\n+// create the signature part you have to take the encoded header, \r\n+// the encoded payload, a secret, the algorithm specified in the header, \r\n+// and sign that.\r\n+const signature = HMACSHA256(`${encodedHeaders}.${encodedPlayload}`, \"mysecret\")\r\n+const encodedSignature = btoa(signature)\r\n+\r\n+const refresh_fake_token = `${encodedHeaders}.${encodedPlayload}.${encodedSignature}`\r\n+console.log(refresh_fake_token)\r\n+\r\n+function createRequest(service) {\r\n+    const instance = service.create();\r\n+\r\n+    instance.interceptors.response.use(\r\n+        function (response) {\r\n+\r\n+            return response;\r\n+        },\r\n+        function (error) {\r\n+            if (error.response) {\r\n+                console.log('error.response.status', error.response.status)\r\n+                switch (error.response.status) {\r\n+                    case 401:\r\n+                        //重新授權\r\n+                        // const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\") ;\r\n+                        // const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token',{ refreshToken : refresh_token});\r\n+                        // Cookies.set('token', data.access_token);\r\n+                        // Cookies.set('refresh_token', data.refresh_token);\r\n+                        console.log(error.message);\r\n+                        alert('未授權重新註冊')\r\n+                        break;\r\n+                    // case 404:\r\n+                    //     console.log(error.message);\r\n+                    //     alert('資料來源不存在')\r\n+                    //     break;\r\n+                    case 500:\r\n+                        console.log(error.message);\r\n+                        alert('內部系統發生錯誤')\r\n+                        break;\r\n+                    default:\r\n+                        console.log(error.message);\r\n+                }\r\n+                if(typeof error.response.data !== 'object') {\r\n+                    alert('服务端异常！')\r\n+                    return Promise.reject(error)\r\n+                }\r\n+\r\n+                if (error.response.resultCode !== 200) {\r\n+                    if (error.response.message) alert(error.response.message)\r\n+                    if (error.response.resultCode == 416) {\r\n+                        router.push({ path: '/login' })\r\n+                    }\r\n+                    if (error.response.data && window.location.hash == '#/login') {\r\n+                        setLocal('token', error.response.data)\r\n+                        axios.defaults.headers['token'] = error.response.data\r\n+                    }\r\n+                    return Promise.reject(error.response)\r\n+                }\r\n+            }\r\n+            if (!window.navigator.onLine) {\r\n+                alert(\"請重新連線後重整網頁\");\r\n+                return;\r\n+            }\r\n+            return Promise.reject(error);\r\n+        },\r\n+    );\r\n+\r\n+    return function(config) {\r\n+        const defaultConfig = {\r\n+            headers: {\r\n+                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n+                \"Content-Type\": \"application/json\"\r\n+            },\r\n+            timeout: 5000,\r\n+            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n+            data: {}\r\n+        };\r\n+        const mergeConfig = merge(defaultConfig, config);\r\n+        return instance(mergeConfig);\r\n+    };\r\n+}\r\n+\r\n+export const request = createRequest(axios);\r\n"
                },
                {
                    "date": 1692580542649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n                     default:\r\n                         console.log(error.message);\r\n                 }\r\n                 if(typeof error.response.data !== 'object') {\r\n-                    alert('服务端异常！')\r\n+                    alert('服務器異常！')\r\n                     return Promise.reject(error)\r\n                 }\r\n \r\n                 if (error.response.resultCode !== 200) {\r\n@@ -75,8 +75,10 @@\n                     if (error.response.resultCode == 416) {\r\n                         router.push({ path: '/login' })\r\n                     }\r\n                     if (error.response.data && window.location.hash == '#/login') {\r\n+                        console.log(error.response.data)\r\n+                        console.log(error.response.)\r\n                         setLocal('token', error.response.data)\r\n                         axios.defaults.headers['token'] = error.response.data\r\n                     }\r\n                     return Promise.reject(error.response)\r\n@@ -105,226 +107,4 @@\n     };\r\n }\r\n \r\n export const request = createRequest(axios);\r\n-import axios from \"axios\";\r\n-import { merge } from \"lodash-es\"\r\n-import Cookies from 'js-cookie';\r\n-import { setLocal } from '../common/js/utils'\r\n-const HMACSHA256 = (stringToSign, secret) => \"not_implemented\"\r\n-\r\n-// The header typically consists of two parts: \r\n-// the type of the token, which is JWT, and the signing algorithm being used, \r\n-// such as HMAC SHA256 or RSA.\r\n-const header = {\r\n-    \"alg\": \"HS256\",\r\n-    \"typ\": \"JWT\"\r\n-}\r\n-const encodedHeaders = btoa(JSON.stringify(header))\r\n-\r\n-\r\n-// The second part of the token is the payload, which contains the claims.\r\n-// Claims are statements about an entity (typically, the user) and \r\n-// additional data. There are three types of claims: \r\n-// registered, public, and private claims.\r\n-const claims = {\r\n-    \"role\": \"admin\"\r\n-}\r\n-const encodedPlayload = btoa(JSON.stringify(claims))\r\n-\r\n-\r\n-// create the signature part you have to take the encoded header, \r\n-// the encoded payload, a secret, the algorithm specified in the header, \r\n-// and sign that.\r\n-const signature = HMACSHA256(`${encodedHeaders}.${encodedPlayload}`, \"mysecret\")\r\n-const encodedSignature = btoa(signature)\r\n-\r\n-const refresh_fake_token = `${encodedHeaders}.${encodedPlayload}.${encodedSignature}`\r\n-console.log(refresh_fake_token)\r\n-\r\n-function createRequest(service) {\r\n-    const instance = service.create();\r\n-\r\n-    instance.interceptors.response.use(\r\n-        function (response) {\r\n-\r\n-            return response;\r\n-        },\r\n-        function (error) {\r\n-            if (error.response) {\r\n-                console.log('error.response.status', error.response.status)\r\n-                switch (error.response.status) {\r\n-                    case 401:\r\n-                        //重新授權\r\n-                        // const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\") ;\r\n-                        // const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token',{ refreshToken : refresh_token});\r\n-                        // Cookies.set('token', data.access_token);\r\n-                        // Cookies.set('refresh_token', data.refresh_token);\r\n-                        console.log(error.message);\r\n-                        alert('未授權請重新登入或重新註冊')\r\n-                        break;\r\n-                    case 401:\r\n-                        alert('拒絕訪問')\r\n-                        break;\r\n-                    // case 404:\r\n-                    //     console.log(error.message);\r\n-                    //     alert('資料來源不存在')\r\n-                    //     break;\r\n-                    case 500:\r\n-                        console.log(error.message);\r\n-                        alert('內部系統發生錯誤')\r\n-                        break;\r\n-                    default:\r\n-                        console.log(error.message);\r\n-                }\r\n-                if(typeof error.response.data !== 'object') {\r\n-                    alert('服务端异常！')\r\n-                    return Promise.reject(error)\r\n-                }\r\n-\r\n-                if (error.response.resultCode !== 200) {\r\n-                    if (error.response.message) alert(error.response.message)\r\n-                    if (error.response.resultCode == 416) {\r\n-                        router.push({ path: '/login' })\r\n-                    }\r\n-                    if (error.response.data && window.location.hash == '#/login') {\r\n-                        setLocal('token', error.response.data)\r\n-                        axios.defaults.headers['token'] = error.response.data\r\n-                    }\r\n-                    return Promise.reject(error.response)\r\n-                }\r\n-            }\r\n-            if (!window.navigator.onLine) {\r\n-                alert(\"請重新連線後重整網頁\");\r\n-                return;\r\n-            }\r\n-            return Promise.reject(error);\r\n-        },\r\n-    );\r\n-\r\n-    return function(config) {\r\n-        const defaultConfig = {\r\n-            headers: {\r\n-                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n-                \"Content-Type\": \"application/json\"\r\n-            },\r\n-            timeout: 5000,\r\n-            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n-            data: {}\r\n-        };\r\n-        const mergeConfig = merge(defaultConfig, config);\r\n-        return instance(mergeConfig);\r\n-    };\r\n-}\r\n-\r\n-export const request = createRequest(axios);\r\n-import axios from \"axios\";\r\n-import { merge } from \"lodash-es\"\r\n-import Cookies from 'js-cookie';\r\n-import { setLocal } from '../common/js/utils'\r\n-const HMACSHA256 = (stringToSign, secret) => \"not_implemented\"\r\n-\r\n-// The header typically consists of two parts: \r\n-// the type of the token, which is JWT, and the signing algorithm being used, \r\n-// such as HMAC SHA256 or RSA.\r\n-const header = {\r\n-    \"alg\": \"HS256\",\r\n-    \"typ\": \"JWT\"\r\n-}\r\n-const encodedHeaders = btoa(JSON.stringify(header))\r\n-\r\n-\r\n-// The second part of the token is the payload, which contains the claims.\r\n-// Claims are statements about an entity (typically, the user) and \r\n-// additional data. There are three types of claims: \r\n-// registered, public, and private claims.\r\n-const claims = {\r\n-    \"role\": \"admin\"\r\n-}\r\n-const encodedPlayload = btoa(JSON.stringify(claims))\r\n-\r\n-\r\n-// create the signature part you have to take the encoded header, \r\n-// the encoded payload, a secret, the algorithm specified in the header, \r\n-// and sign that.\r\n-const signature = HMACSHA256(`${encodedHeaders}.${encodedPlayload}`, \"mysecret\")\r\n-const encodedSignature = btoa(signature)\r\n-\r\n-const refresh_fake_token = `${encodedHeaders}.${encodedPlayload}.${encodedSignature}`\r\n-console.log(refresh_fake_token)\r\n-\r\n-function createRequest(service) {\r\n-    const instance = service.create();\r\n-\r\n-    instance.interceptors.response.use(\r\n-        function (response) {\r\n-\r\n-            return response;\r\n-        },\r\n-        function (error) {\r\n-            if (error.response) {\r\n-                console.log('error.response.status', error.response.status)\r\n-                switch (error.response.status) {\r\n-                    case 401:\r\n-                        //重新授權\r\n-                        const refreshToken = Cookies.get('refreshToken') || sessionStorage.getItem(\"refresh_token\") ;\r\n-                        const { data } = axios.post('https://api.escuelajs.co/api/v1/auth/refresh-token',{ refreshToken : refresh_token});\r\n-                        Cookies.set('token', data.access_token);\r\n-                        Cookies.set('refresh_token', data.refresh_token);\r\n-                        console.log(error.message);\r\n-                        alert('未授權請重新登入或重新註冊')\r\n-                        break;\r\n-                    case 401:\r\n-                        alert('拒絕訪問')\r\n-                        break;\r\n-                    // case 404:\r\n-                    //     console.log(error.message);\r\n-                    //     alert('資料來源不存在')\r\n-                    //     break;\r\n-                    case 500:\r\n-                        console.log(error.message);\r\n-                        alert('內部系統發生錯誤')\r\n-                        break;\r\n-                    default:\r\n-                        console.log(error.message);\r\n-                }\r\n-                if(typeof error.response.data !== 'object') {\r\n-                    alert('服务端异常！')\r\n-                    return Promise.reject(error)\r\n-                }\r\n-\r\n-                if (error.response.resultCode !== 200) {\r\n-                    if (error.response.message) alert(error.response.message)\r\n-                    if (error.response.resultCode == 416) {\r\n-                        router.push({ path: '/login' })\r\n-                    }\r\n-                    if (error.response.data && window.location.hash == '#/login') {\r\n-                        setLocal('token', error.response.data)\r\n-                        axios.defaults.headers['token'] = error.response.data\r\n-                    }\r\n-                    return Promise.reject(error.response)\r\n-                }\r\n-            }\r\n-            if (!window.navigator.onLine) {\r\n-                alert(\"請重新連線後重整網頁\");\r\n-                return;\r\n-            }\r\n-            return Promise.reject(error);\r\n-        },\r\n-    );\r\n-\r\n-    return function(config) {\r\n-        const defaultConfig = {\r\n-            headers: {\r\n-                Authorization: Cookies.get('token') ? `Bearer ${Cookies.get('token')}` : undefined,\r\n-                \"Content-Type\": \"application/json\"\r\n-            },\r\n-            timeout: 5000,\r\n-            baseURL: 'https://api.escuelajs.co/api/v1/',\r\n-            data: {}\r\n-        };\r\n-        const mergeConfig = merge(defaultConfig, config);\r\n-        return instance(mergeConfig);\r\n-    };\r\n-}\r\n-\r\n-export const request = createRequest(axios);\r\n"
                },
                {
                    "date": 1692580634224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,21 +69,21 @@\n                     alert('服務器異常！')\r\n                     return Promise.reject(error)\r\n                 }\r\n \r\n-                if (error.response.resultCode !== 200) {\r\n-                    if (error.response.message) alert(error.response.message)\r\n-                    if (error.response.resultCode == 416) {\r\n-                        router.push({ path: '/login' })\r\n-                    }\r\n-                    if (error.response.data && window.location.hash == '#/login') {\r\n-                        console.log(error.response.data)\r\n-                        console.log(error.response.)\r\n-                        setLocal('token', error.response.data)\r\n-                        axios.defaults.headers['token'] = error.response.data\r\n-                    }\r\n-                    return Promise.reject(error.response)\r\n-                }\r\n+                // if (error.response.resultCode !== 200) {\r\n+                //     if (error.response.message) alert(error.response.message)\r\n+                //     if (error.response.resultCode == 416) {\r\n+                //         router.push({ path: '/login' })\r\n+                //     }\r\n+                //     if (error.response.data && window.location.hash == '#/login') {\r\n+                //         console.log(error.response.data)\r\n+                //         console.log(error.response)\r\n+                //         setLocal('token', error.response.data)\r\n+                //         axios.defaults.headers['token'] = error.response.data\r\n+                //     }\r\n+                //     return Promise.reject(error.response)\r\n+                // }\r\n             }\r\n             if (!window.navigator.onLine) {\r\n                 alert(\"請重新連線後重整網頁\");\r\n                 return;\r\n"
                }
            ],
            "date": 1691468319064,
            "name": "Commit-0",
            "content": "import axios from 'axios'\r\nimport { usePlaneData } from ''\r\n\r\nconst store = usePlaneData()\r\n\r\naxios.defaults.timeout = 5000\r\naxios.defaults.baseURL = 'https://reqres.in/api/'\r\n\r\n\r\n\r\naxios.interceptors.request.use(\r\n    config => {\r\n        if (store.state.token) {\r\n            config.headers.Authorization = `token ${store.state.token}`\r\n        }\r\n        return config\r\n    },\r\n    err => {\r\n        return Promise.reject(err)\r\n    },\r\n)\r\naxios.interceptors.response.use(\r\n    response => {\r\n        return response\r\n    },\r\n    error => {\r\n        if (error.response) {\r\n        switch (error.response.status) {\r\n            case 401:\r\n            store.commit(store.registerUser)\r\n            router.currentRoute.path !== 'login' &&\r\n            router.replace({\r\n                path: 'login',\r\n                query: { redirect: router.currentRoute.path },\r\n            })\r\n        }\r\n    }\r\n        return Promise.reject(error.response.data)\r\n    },\r\n)\r\n\r\nexport default axios\r\n"
        }
    ]
}